import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
//import { useLoginMutation,useGetAllRegisterQuery } from '../../../components/login/loginService';
import {userListAPI} from './userAPI';
import STATUSES from '../../../constants/apiStatus';


const initialState = {
  "status": STATUSES.IDLE,
  "data": "", 
  "error":'',
  "is_success":false
};


export const userList = createAsyncThunk(
  'user/userListAPI',
  async (parameter,{rejectWithValue}) => {   
   
   try {
     const response = await userListAPI(parameter);
          // The value we return becomes the `fulfilled` action payload
          return response;
   } catch (err) {
   
    return rejectWithValue(err.response.data)
  }
         
  }
);
export const userSlice = createSlice({
  name: 'userList',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: { 
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
 // extraReducers: () => {}
  extraReducers: (builder) => {    
    builder     
      .addCase(userList.pending, (state) => {
        state.status = STATUSES.LOADING;
        state.data="";
        state.error="";
        state.is_success=false;
      })
      .addCase(userList.fulfilled, (state, action) => {       
          state.status = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.ERROR;
          state.data=(action.payload && action.payload.is_success==true ?action.payload:"");  
          state.error=action.payload && action.payload.is_success==true?"": action.payload.exceptions[0];
          state.is_success=action.payload && action.payload.is_success==true? true: false;      
      })
      .addCase(userList.rejected, (state,action) => {
        state.status = STATUSES.IDLE;
        state.data="";
        state.error = action.error;
        state.is_success=false;
      });
  },
});

 export const { loginPanding, loginSuccess, loginFail } = userSlice.actions;


export default userSlice;
