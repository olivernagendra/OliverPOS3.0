import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
//import { useLoginMutation,useGetAllRegisterQuery } from '../../../components/login/loginService';
import {loginAPI} from './loginAPI';

export const STATUSES = Object.freeze({
  IDLE: 'idle',
  ERROR: 'error',
  LOADING: 'loading',
});

const initialState = {
  "status": STATUSES.IDLE,
  "data": [], 
  "error":''
};


export const userLogin = createAsyncThunk(
  'login/loginAPI',
  async (parameter) => {   
    // const response =  loginAPI(parameter);
    // // The value we return becomes the `fulfilled` action payload
    // console.log("test",response.json())
    // return response.json();

   
          const response = await loginAPI(parameter);
          // The value we return becomes the `fulfilled` action payload
          return response;
  }
);
export const loginSlice = createSlice({
  name: 'login',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: { 
    loginPanding:(state)=>{
      state.status=STATUSES.LOADING;
    },
    loginSuccess:(state,action)=>{
      state.status=STATUSES.IDLE;
      state.error='';
      state.data=action.payload
    },
    loginFail:(state,action)=>{
      state.status=STATUSES.ERROR;    
      state.data=[];
      state.error=action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
 // extraReducers: () => {}
  extraReducers: (builder) => {    
    builder
      .addCase(userLogin.pending, (state) => {
        state.status = STATUSES.LOADING;
      })
      .addCase(userLogin.fulfilled, (state, action) => {       
          state.status = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.ERROR;
          state.data=(action.payload && action.payload.is_success==true ?action.payload:"");  
          state.error=action.payload && action.payload.is_success==false? action.payload.exceptions[0]: "";      
      });
  },
});

 export const { loginPanding, loginSuccess, loginFail } = loginSlice.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.login.value)`
// export const selectCount = (state) => state.login.value;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default loginSlice;
