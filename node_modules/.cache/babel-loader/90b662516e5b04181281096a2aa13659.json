{"ast":null,"code":"// A mock function to mimic making an async request for data\nimport{serverRequest}from'../../CommonServiceRequest/serverRequest';export function loginAPI(parameter){// const res = await fetch('https://fakestoreapi.com/products');\n//   const data = await res.json();\n//   return data;\nreturn serverRequest.clientServiceRequest('POST',\"/account/Login\",parameter).then(function(userRes){//var data = userRes.content;\nreturn userRes;}).catch(function(error){return error;});}// External Login API \nexport function OliverExternalLogin(externalLoginParam){return serverRequest.clientServiceRequest('POST','/account/LoginExternaly',externalLoginParam).then(function(response){console.log('OliverExternalLogin services respons--',response);if(response){return response;}}).catch(function(error){console.log(error);return'Unable to fetch';});}export function GetUserProfile(profileGetParam){var requestOptions={method:'GET',// headers: {\n//     \"access-control-allow-origin\": \"*\",\n//     \"access-control-allow-credentials\": \"true\",\n//     'Accept': 'application/json',\n//     'Content-Type': 'application/json',\n// }\nmode:'cors'};return fetch(\"https://people.googleapis.com/v1/people/\".concat(profileGetParam.userId,\"/?personFields=ageRanges,names,photos,addresses,locations,birthdays,genders,phoneNumbers,metadata&alt=json&access_token=\").concat(profileGetParam.access_token))// .then(response => {\n//     console.log('---res----', response);\n//     return response\n// })\n// .then(handleResponse)\n.then(function(profileInfo){console.log('--------service -Res--',profileInfo);return profileInfo;}).catch(function(error){console.log(error);return'Unable to get';});}","map":{"version":3,"names":["serverRequest","loginAPI","parameter","clientServiceRequest","then","userRes","catch","error","OliverExternalLogin","externalLoginParam","response","console","log","GetUserProfile","profileGetParam","requestOptions","method","mode","fetch","userId","access_token","profileInfo"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/login/loginAPI.js"],"sourcesContent":["// A mock function to mimic making an async request for data\r\nimport { serverRequest } from '../../CommonServiceRequest/serverRequest'\r\nexport function loginAPI(parameter) {\r\n    // const res = await fetch('https://fakestoreapi.com/products');\r\n    //   const data = await res.json();\r\n    //   return data;\r\n\r\n    return serverRequest.clientServiceRequest('POST', `/account/Login`, parameter)\r\n        .then(userRes => {\r\n            //var data = userRes.content;\r\n            return userRes;\r\n        }).catch(error => {\r\n            return error\r\n        });\r\n}\r\n\r\n\r\n// External Login API \r\n\r\nexport function OliverExternalLogin(externalLoginParam) {\r\n    return serverRequest.clientServiceRequest('POST', '/account/LoginExternaly', externalLoginParam)\r\n        .then(response => {\r\n            console.log('OliverExternalLogin services respons--', response);\r\n            if (response) {\r\n                return response;\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n            return 'Unable to fetch';\r\n        })\r\n}\r\n\r\n\r\nexport function GetUserProfile(profileGetParam) {\r\n    var requestOptions = {\r\n        method: 'GET',\r\n        // headers: {\r\n        //     \"access-control-allow-origin\": \"*\",\r\n        //     \"access-control-allow-credentials\": \"true\",\r\n        //     'Accept': 'application/json',\r\n        //     'Content-Type': 'application/json',\r\n        // }\r\n        mode: 'cors',\r\n    };\r\n    return fetch(`https://people.googleapis.com/v1/people/${profileGetParam.userId}/?personFields=ageRanges,names,photos,addresses,locations,birthdays,genders,phoneNumbers,metadata&alt=json&access_token=${profileGetParam.access_token}`)\r\n        // .then(response => {\r\n        //     console.log('---res----', response);\r\n        //     return response\r\n        // })\r\n        // .then(handleResponse)\r\n        .then(profileInfo => {\r\n            console.log('--------service -Res--', profileInfo);\r\n            return profileInfo;\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            return 'Unable to get';\r\n        })\r\n}"],"mappings":"AAAA;AACA,OAASA,aAAT,KAA8B,0CAA9B,CACA,MAAO,SAASC,SAAT,CAAkBC,SAAlB,CAA6B,CAChC;AACA;AACA;AAEA,MAAOF,cAAa,CAACG,oBAAd,CAAmC,MAAnC,kBAA6DD,SAA7D,EACFE,IADE,CACG,SAAAC,OAAO,CAAI,CACb;AACA,MAAOA,QAAP,CACH,CAJE,EAIAC,KAJA,CAIM,SAAAC,KAAK,CAAI,CACd,MAAOA,MAAP,CACH,CANE,CAAP,CAOH,CAGD;AAEA,MAAO,SAASC,oBAAT,CAA6BC,kBAA7B,CAAiD,CACpD,MAAOT,cAAa,CAACG,oBAAd,CAAmC,MAAnC,CAA2C,yBAA3C,CAAsEM,kBAAtE,EACFL,IADE,CACG,SAAAM,QAAQ,CAAI,CACdC,OAAO,CAACC,GAAR,CAAY,wCAAZ,CAAsDF,QAAtD,EACA,GAAIA,QAAJ,CAAc,CACV,MAAOA,SAAP,CACH,CACJ,CANE,EAMAJ,KANA,CAMM,SAAUC,KAAV,CAAiB,CACtBI,OAAO,CAACC,GAAR,CAAYL,KAAZ,EACA,MAAO,iBAAP,CACH,CATE,CAAP,CAUH,CAGD,MAAO,SAASM,eAAT,CAAwBC,eAAxB,CAAyC,CAC5C,GAAIC,eAAc,CAAG,CACjBC,MAAM,CAAE,KADS,CAEjB;AACA;AACA;AACA;AACA;AACA;AACAC,IAAI,CAAE,MARW,CAArB,CAUA,MAAOC,MAAK,mDAA4CJ,eAAe,CAACK,MAA5D,oIAA6LL,eAAe,CAACM,YAA7M,EACR;AACA;AACA;AACA;AACA;AALG,CAMFhB,IANE,CAMG,SAAAiB,WAAW,CAAI,CACjBV,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAsCS,WAAtC,EACA,MAAOA,YAAP,CACH,CATE,EAUFf,KAVE,CAUI,SAAUC,KAAV,CAAiB,CACpBI,OAAO,CAACC,GAAR,CAAYL,KAAZ,EACA,MAAO,eAAP,CACH,CAbE,CAAP,CAcH"},"metadata":{},"sourceType":"module"}