{"ast":null,"code":"var _jsxFileName = \"D:\\\\OliverPOS\\\\OliverPOS3.0\\\\src\\\\components\\\\loadProduct\\\\ProductLoader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteDB, openDB } from 'idb';\nimport { get_UDid } from '../common/localSettings';\nimport Config from '../../Config';\nimport { receiptSetting } from '../serverSetting/receiptSettingSlice';\nimport ActiveUser from '../../settings/ActiveUser';\nimport { taxSetting } from '../serverSetting/taxSettingSlice';\nimport STATUSES from '../../constants/apiStatus';\nimport { productCount } from './loadProductSlice'; //import LoaderOnboarding from '../onboarding/components/LoaderOnboarding'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductLoader = () => {\n  _s();\n\n  const dispatch = useDispatch(); //Getting the receipt and tax setting--------------------    \n\n  const [respReceiptSetting, respTaxSetting, resProlductLoader] = useSelector(state => [state.receiptsetting, state.taxsetting.state, state.productloader]);\n  console.log(\"respReceiptSetting\", respReceiptSetting, respTaxSetting);\n\n  if (respReceiptSetting && respReceiptSetting.status == STATUSES.IDLE && respReceiptSetting.is_success) {\n    localStorage.setItem('orderreciept', JSON.stringify(respReceiptSetting.data.content));\n  }\n\n  if (respTaxSetting && respTaxSetting.status == STATUSES.IDLE && respTaxSetting.is_success) {\n    localStorage.setItem('TAX_SETTING', JSON.stringify(respTaxSetting.data.content));\n  }\n\n  if (resProlductLoader && resProlductLoader.status == STATUSES.IDLE && resProlductLoader.is_success) {\n    localStorage.setItem('productcount', JSON.stringify(respTaxSetting.data.content));\n  }\n\n  var udid = get_UDid(localStorage.getItem(\"UDID\"));\n  var ProductArray = [{\n    \"id\": 1,\n    \"name\": \"nagendra\"\n  }, {\n    \"id\": 2,\n    \"name\": \"pranav\"\n  }]; //To Clear indexDB----------------------------\n\n  var isDemoUser = localStorage.getItem('demoUser') ? localStorage.getItem('demoUser') : false;\n  var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/shopview';\n  var udid = get_UDid(localStorage.getItem(\"UDID\"));\n  var pcount = 2; // localStorage.getItem('productcount');\n  // //------------------------------------------------\n  // localStorage.setItem(\"ProductLoad\", \"true\");\n  // console.log(\"--------------Product list request First time--------\" + new Date());\n  // var RedirectUrl = \"\"\n\n  useEffect(() => {\n    fetchData(); //createIndexDB(udid, ProductArray, RedirectUrl);\n\n    if (isDemoUser == false) {\n      if (pcount == null || typeof pcount == 'undefined' || pcount == 0) {// window.location = RedirectUrl;\n      } //updateIndexDB(udid, ProductArray, RedirectUrl);\n\n    }\n  }, []);\n\n  const fetchData = async () => {\n    //calling multiple api\n    dispatch(productCount(udid)); // dispatch(receiptSetting());\n    // dispatch(taxSetting());\n  }; //------------------------------------------------- \n  // const createIndexDB=(udid, ProductArray, RedirectUrl)=>{\n  //     (async () => {\n  //         if (!('indexedDB' in window)) {\n  //             console.warn('IndexedDB not supported')\n  //             return\n  //           }\n  //           const dbName = 'POSdb'\n  //           const storeName = 'product_'+udid\n  //           const version = 1 //versions start at 1\n  //           //delete Database\n  //           await deleteDB(dbName)\n  //           const db = await openDB(dbName, version, {\n  //             upgrade(db, oldVersion, newVersion, transaction) {\n  //               const store = db.createObjectStore(storeName,{ autoIncrement: true })   //  \"id\"         \n  //             }\n  //           })\n  //           const tx = db.transaction(storeName, 'readwrite')\n  //           const store = await tx.objectStore(storeName)\n  //           const val = 'hey!'\n  //           const key = 'Hello again'\n  //           ProductArray.forEach(element => {\n  //              const value =  store.put(element)\n  //           });\n  //           await tx.done\n  //         })()\n  // }\n  //     const getProductList=(pn, pz, pl, trc)=> {\n  //         if (trc != 0) {\n  //             var _perc=((pl.length*100)/trc).toFixed(0);\n  //            // this.setState({ loadingProducts: \"Synched \" + pl.length + \" Products, Out of \" + trc + \"\",loadPerc: _perc });          \n  //         }\n  //         var self = this;\n  //         if (!localStorage.getItem('user') || !sessionStorage.getItem(\"issuccess\")) {\n  //             //redirectToURL()\n  //             // history.push('/loginpin');\n  //         }\n  //         var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/shopview';\n  //         var udid = get_UDid(localStorage.getItem(\"UDID\"));\n  //         var reloadCount = localStorage.getItem(\"ReloadCount\") ? localStorage.getItem(\"ReloadCount\") : 0;\n  //         var WarehouseId = localStorage.getItem(\"WarehouseId\") ? parseInt(localStorage.getItem(\"WarehouseId\")) : 0;\n  //         var pageNumber = pn;\n  //         var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n  //         var ProductArray = pl;\n  //         var TotaltotalRecord = trc;\n  //         const requestOptions = {\n  //             method: 'GET',\n  //             headers: {\n  //                 \"access-control-allow-origin\": \"*\",\n  //                 \"access-control-allow-credentials\": \"true\",\n  //                 'Accept': 'application/json',\n  //                 'Content-Type': 'application/json',\n  //                 'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\")),\n  //             }\n  //             , mode: 'cors'\n  //         };\n  //         var isDemoUser =localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n  //         if (isDemoUser==true) {\n  //             requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid')\n  //         }\n  //         if (TotaltotalRecord == 0 && isDemoUser==false) {\n  //             // window.location = RedirectUrl ;  \n  //             self.UpdateIndexDB(udid, ProductArray, RedirectUrl);\n  //         }\n  //         // call firstTime------------------\n  //         //  call common service\n  //         //  serverRequest.clientServiceRequest('GET', `/ShopData/GetProductPageUpdatedWithCount?udid=${udid}&pageNumber=${pageNumber}&pageSize=${PageSize}`, '')\n  //         fetch(`${Config.key.OP_API_URL}/v1/Product/Records?pageNumber=${pageNumber}&pageSize=${PageSize}&WarehouseId=${WarehouseId}`, requestOptions)\n  //             .then(response => {\n  //                 if (response.ok) { return response.json(); }\n  //                 throw new Error(response.statusText)  // throw an error if there's something wrong with the response\n  //             })\n  //             .then(function handleData(data) {\n  //                 var reloadCount = localStorage.getItem(\"ReloadCount\");\n  //                 ProductArray = [...new Set([...ProductArray, ...data.content.Records])];\n  //                 //check dataExist into indexdb-------------------------\n  //                 var isExist = false;\n  //                 console.log(\"--------------Total Products count--------\" + TotaltotalRecord);               \n  //                 console.log(\"Test\", TotaltotalRecord, ProductArray.length)\n  //                 if (isDemoUser==false && (TotaltotalRecord > ProductArray.length) && ((TotaltotalRecord != ProductArray.length) || pageNumber <= (TotaltotalRecord / PageSize * 1.0))) {\n  //                     console.log(\"--------------Product list request time--------\" + new Date());\n  //                     // self.UpdateIndexDB(udid,ProductArray);\n  //                     pageNumber++;\n  //                     //console.log(\"ProductArray1\",ProductArray.length)                   \n  //                     self.getProductList(pageNumber, PageSize, ProductArray, TotaltotalRecord);\n  //                 }\n  //                 else {\n  //                     console.log(\"--------------all records are done-----------\");\n  //                     //console.log(\"ProductArray2\",ProductArray.length)                        \n  //                     self.UpdateIndexDB(udid, ProductArray, RedirectUrl);\n  //                     //history.push('/shopview');\n  //                 }\n  //             })\n  //             .catch(function handleError(error) {\n  //                 console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\n  //                 var reloadCount = localStorage.getItem(\"ReloadCount\");\n  //                 // handle errors here\n  //                 if (reloadCount < 3) {\n  //                     localStorage.setItem(\"ReloadCount\", (parseInt(reloadCount) + 1));\n  //                     setTimeout(function () {\n  //                         window.location = '/'; //Reload to get product\n  //                         // window.location = '/shopview'\n  //                     }, 1000)\n  //                     //history.push('/')\n  //                 }\n  //             })\n  //     }\n\n\n  const updateIndexDB = (udid, ProductArray, RedirectUrl) => {\n    var TotaltotalRecord = 2; // localStorage.getItem('productcount');        \n\n    var _perc = 0;\n\n    if (ProductArray && ProductArray.length > 0 && TotaltotalRecord && TotaltotalRecord > 0) {\n      _perc = (ProductArray.length * 100 / TotaltotalRecord).toFixed(0);\n    } // this.setState({ loadPerc: _perc });    \n\n\n    const dbPromise = openDB(\"ProductDB\", 1, {\n      upgrade(db, oldVersion, newVersion, transaction) {\n        db.createObjectStore(udid);\n      },\n\n      blocked() {// â€¦\n      },\n\n      blocking() {// â€¦\n      },\n\n      terminated() {// â€¦\n      }\n\n    }); // const dbPromise = openDB('ProductDB', 1, upgradeDB => {\n    //     upgradeDB.createObjectStore(udid);\n    // });\n\n    const idbKeyval = {\n      async get(key) {\n        const db = await dbPromise;\n        return db.transaction(udid).objectStore(udid).get(key);\n      },\n\n      async set(key, val) {\n        const db = await dbPromise;\n        const tx = db.transaction(udid, 'readwrite');\n        tx.objectStore(udid).put(val, key);\n        return tx.complete;\n      }\n\n    }; // for unique array----------------------\n\n    const arrayUniqueByKey = [...new Map(ProductArray.map(item => [item['WPID'], item])).values()];\n    idbKeyval.set('ProductList', arrayUniqueByKey);\n    idbKeyval.get('ProductList').then(val => {\n      if (ProductArray.length == 0 || !val || val.length == 0 || val == null || val == \"\") {\n        console.log(\"wait...\");\n      } else {\n        if (ActiveUser.key.isSelfcheckout == true) {// if(isMobileOnly == true){\n          //     history.push('/selfcheckout')\n          // }else{\n          //  window.location = '/selfcheckout';\n          //}\n        } else {// if(isMobileOnly == true){\n          //     history.push('/shopview')\n          // }else{\n          //     window.location = '/shopview';\n          // }\n        }\n      }\n    }); //------------------------------------------\n  }; //  this.getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Product Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProductLoader, \"XdNWyMfJpg7JwLHZwYWSPsndWqw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = ProductLoader;\nexport default ProductLoader;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductLoader\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","deleteDB","openDB","get_UDid","Config","receiptSetting","ActiveUser","taxSetting","STATUSES","productCount","ProductLoader","dispatch","respReceiptSetting","respTaxSetting","resProlductLoader","state","receiptsetting","taxsetting","productloader","console","log","status","IDLE","is_success","localStorage","setItem","JSON","stringify","data","content","udid","getItem","ProductArray","isDemoUser","RedirectUrl","key","isSelfcheckout","pcount","fetchData","updateIndexDB","TotaltotalRecord","_perc","length","toFixed","dbPromise","upgrade","db","oldVersion","newVersion","transaction","createObjectStore","blocked","blocking","terminated","idbKeyval","get","objectStore","set","val","tx","put","complete","arrayUniqueByKey","Map","map","item","values","then"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/loadProduct/ProductLoader.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteDB, openDB } from 'idb';\r\n\r\nimport { get_UDid } from '../common/localSettings'\r\nimport Config from '../../Config';\r\nimport { receiptSetting } from '../serverSetting/receiptSettingSlice';\r\nimport ActiveUser from '../../settings/ActiveUser';\r\nimport { taxSetting } from '../serverSetting/taxSettingSlice';\r\nimport STATUSES from '../../constants/apiStatus';\r\nimport { productCount } from './loadProductSlice';\r\n//import LoaderOnboarding from '../onboarding/components/LoaderOnboarding'\r\nconst ProductLoader = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    //Getting the receipt and tax setting--------------------    \r\n    const [respReceiptSetting, respTaxSetting, resProlductLoader] = useSelector((state) => [state.receiptsetting, state.taxsetting.state, state.productloader])\r\n    console.log(\"respReceiptSetting\", respReceiptSetting, respTaxSetting)\r\n\r\n    if (respReceiptSetting && respReceiptSetting.status == STATUSES.IDLE && respReceiptSetting.is_success) {\r\n        localStorage.setItem('orderreciept', JSON.stringify(respReceiptSetting.data.content))\r\n    }\r\n    if (respTaxSetting && respTaxSetting.status == STATUSES.IDLE && respTaxSetting.is_success) {\r\n        localStorage.setItem('TAX_SETTING', JSON.stringify(respTaxSetting.data.content))\r\n    }\r\n    if (resProlductLoader && resProlductLoader.status == STATUSES.IDLE && resProlductLoader.is_success) {\r\n        localStorage.setItem('productcount', JSON.stringify(respTaxSetting.data.content))\r\n    }\r\n    var udid = get_UDid(localStorage.getItem(\"UDID\"));\r\n    var ProductArray = [{ \"id\": 1, \"name\": \"nagendra\" }, { \"id\": 2, \"name\": \"pranav\" }]\r\n    //To Clear indexDB----------------------------\r\n    var isDemoUser = localStorage.getItem('demoUser') ? localStorage.getItem('demoUser') : false;\r\n    var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/shopview';\r\n    var udid = get_UDid(localStorage.getItem(\"UDID\"));\r\n    var pcount = 2// localStorage.getItem('productcount');\r\n\r\n    // //------------------------------------------------\r\n    // localStorage.setItem(\"ProductLoad\", \"true\");\r\n    // console.log(\"--------------Product list request First time--------\" + new Date());\r\n\r\n    // var RedirectUrl = \"\"\r\n    useEffect(() => {\r\n        fetchData()\r\n        //createIndexDB(udid, ProductArray, RedirectUrl);\r\n        if (isDemoUser == false) {\r\n            if (pcount == null || typeof (pcount) == 'undefined' || pcount == 0) {\r\n                // window.location = RedirectUrl;\r\n            }\r\n            //updateIndexDB(udid, ProductArray, RedirectUrl);\r\n        }\r\n    }, []);\r\n\r\n    const fetchData = async () => { //calling multiple api\r\n        dispatch(productCount(udid));\r\n        // dispatch(receiptSetting());\r\n        // dispatch(taxSetting());\r\n\r\n\r\n    }\r\n    //------------------------------------------------- \r\n\r\n    // const createIndexDB=(udid, ProductArray, RedirectUrl)=>{\r\n    //     (async () => {\r\n    //         if (!('indexedDB' in window)) {\r\n    //             console.warn('IndexedDB not supported')\r\n    //             return\r\n    //           }\r\n\r\n    //           const dbName = 'POSdb'\r\n    //           const storeName = 'product_'+udid\r\n    //           const version = 1 //versions start at 1\r\n\r\n    //           //delete Database\r\n    //           await deleteDB(dbName)\r\n\r\n\r\n    //           const db = await openDB(dbName, version, {\r\n    //             upgrade(db, oldVersion, newVersion, transaction) {\r\n    //               const store = db.createObjectStore(storeName,{ autoIncrement: true })   //  \"id\"         \r\n    //             }\r\n    //           })\r\n    //           const tx = db.transaction(storeName, 'readwrite')\r\n    //           const store = await tx.objectStore(storeName)\r\n\r\n    //           const val = 'hey!'\r\n    //           const key = 'Hello again'\r\n    //           ProductArray.forEach(element => {\r\n    //              const value =  store.put(element)\r\n    //           });\r\n\r\n    //           await tx.done\r\n\r\n    //         })()\r\n    // }\r\n\r\n    //     const getProductList=(pn, pz, pl, trc)=> {\r\n    //         if (trc != 0) {\r\n    //             var _perc=((pl.length*100)/trc).toFixed(0);\r\n    //            // this.setState({ loadingProducts: \"Synched \" + pl.length + \" Products, Out of \" + trc + \"\",loadPerc: _perc });          \r\n    //         }\r\n\r\n    //         var self = this;\r\n    //         if (!localStorage.getItem('user') || !sessionStorage.getItem(\"issuccess\")) {\r\n    //             //redirectToURL()\r\n    //             // history.push('/loginpin');\r\n    //         }\r\n    //         var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/shopview';\r\n\r\n    //         var udid = get_UDid(localStorage.getItem(\"UDID\"));\r\n    //         var reloadCount = localStorage.getItem(\"ReloadCount\") ? localStorage.getItem(\"ReloadCount\") : 0;\r\n    //         var WarehouseId = localStorage.getItem(\"WarehouseId\") ? parseInt(localStorage.getItem(\"WarehouseId\")) : 0;\r\n\r\n    //         var pageNumber = pn;\r\n    //         var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\r\n    //         var ProductArray = pl;\r\n    //         var TotaltotalRecord = trc;\r\n    //         const requestOptions = {\r\n    //             method: 'GET',\r\n    //             headers: {\r\n    //                 \"access-control-allow-origin\": \"*\",\r\n    //                 \"access-control-allow-credentials\": \"true\",\r\n    //                 'Accept': 'application/json',\r\n    //                 'Content-Type': 'application/json',\r\n    //                 'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\")),\r\n    //             }\r\n    //             , mode: 'cors'\r\n    //         };\r\n    //         var isDemoUser =localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\r\n    //         if (isDemoUser==true) {\r\n    //             requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid')\r\n    //         }\r\n    //         if (TotaltotalRecord == 0 && isDemoUser==false) {\r\n    //             // window.location = RedirectUrl ;  \r\n    //             self.UpdateIndexDB(udid, ProductArray, RedirectUrl);\r\n    //         }\r\n    //         // call firstTime------------------\r\n    //         //  call common service\r\n    //         //  serverRequest.clientServiceRequest('GET', `/ShopData/GetProductPageUpdatedWithCount?udid=${udid}&pageNumber=${pageNumber}&pageSize=${PageSize}`, '')\r\n\r\n    //         fetch(`${Config.key.OP_API_URL}/v1/Product/Records?pageNumber=${pageNumber}&pageSize=${PageSize}&WarehouseId=${WarehouseId}`, requestOptions)\r\n    //             .then(response => {\r\n    //                 if (response.ok) { return response.json(); }\r\n    //                 throw new Error(response.statusText)  // throw an error if there's something wrong with the response\r\n    //             })\r\n    //             .then(function handleData(data) {\r\n    //                 var reloadCount = localStorage.getItem(\"ReloadCount\");\r\n    //                 ProductArray = [...new Set([...ProductArray, ...data.content.Records])];\r\n\r\n    //                 //check dataExist into indexdb-------------------------\r\n    //                 var isExist = false;\r\n\r\n    //                 console.log(\"--------------Total Products count--------\" + TotaltotalRecord);               \r\n\r\n    //                 console.log(\"Test\", TotaltotalRecord, ProductArray.length)\r\n    //                 if (isDemoUser==false && (TotaltotalRecord > ProductArray.length) && ((TotaltotalRecord != ProductArray.length) || pageNumber <= (TotaltotalRecord / PageSize * 1.0))) {\r\n    //                     console.log(\"--------------Product list request time--------\" + new Date());\r\n    //                     // self.UpdateIndexDB(udid,ProductArray);\r\n    //                     pageNumber++;\r\n    //                     //console.log(\"ProductArray1\",ProductArray.length)                   \r\n    //                     self.getProductList(pageNumber, PageSize, ProductArray, TotaltotalRecord);\r\n    //                 }\r\n    //                 else {\r\n    //                     console.log(\"--------------all records are done-----------\");\r\n    //                     //console.log(\"ProductArray2\",ProductArray.length)                        \r\n\r\n    //                     self.UpdateIndexDB(udid, ProductArray, RedirectUrl);\r\n    //                     //history.push('/shopview');\r\n\r\n    //                 }\r\n    //             })\r\n    //             .catch(function handleError(error) {\r\n    //                 console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\r\n    //                 var reloadCount = localStorage.getItem(\"ReloadCount\");\r\n    //                 // handle errors here\r\n    //                 if (reloadCount < 3) {\r\n    //                     localStorage.setItem(\"ReloadCount\", (parseInt(reloadCount) + 1));\r\n    //                     setTimeout(function () {\r\n    //                         window.location = '/'; //Reload to get product\r\n    //                         // window.location = '/shopview'\r\n    //                     }, 1000)\r\n    //                     //history.push('/')\r\n    //                 }\r\n    //             })\r\n    //     }\r\n    const updateIndexDB = (udid, ProductArray, RedirectUrl) => {\r\n        var TotaltotalRecord = 2// localStorage.getItem('productcount');        \r\n        var _perc = 0;\r\n        if (ProductArray && ProductArray.length > 0 && TotaltotalRecord && TotaltotalRecord > 0) {\r\n            _perc = ((ProductArray.length * 100) / TotaltotalRecord).toFixed(0);\r\n        }\r\n        // this.setState({ loadPerc: _perc });    \r\n        const dbPromise = openDB(\"ProductDB\", 1, {\r\n            upgrade(db, oldVersion, newVersion, transaction) {\r\n                db.createObjectStore(udid);\r\n            },\r\n            blocked() {\r\n                // â€¦\r\n            },\r\n            blocking() {\r\n                // â€¦\r\n            },\r\n            terminated() {\r\n                // â€¦\r\n            },\r\n        });\r\n        // const dbPromise = openDB('ProductDB', 1, upgradeDB => {\r\n        //     upgradeDB.createObjectStore(udid);\r\n        // });\r\n        const idbKeyval = {\r\n            async get(key) {\r\n                const db = await dbPromise;\r\n                return db.transaction(udid).objectStore(udid).get(key);\r\n            },\r\n            async set(key, val) {\r\n                const db = await dbPromise;\r\n                const tx = db.transaction(udid, 'readwrite');\r\n                tx.objectStore(udid).put(val, key);\r\n                return tx.complete;\r\n            },\r\n        };\r\n        // for unique array----------------------\r\n        const arrayUniqueByKey = [...new Map(ProductArray.map(item =>\r\n            [item['WPID'], item])).values()];\r\n        idbKeyval.set('ProductList', arrayUniqueByKey);\r\n\r\n        idbKeyval.get('ProductList').then(val => {\r\n            if (ProductArray.length == 0 || !val || val.length == 0 || val == null || val == \"\") {\r\n                console.log(\"wait...\");\r\n            } else {\r\n                if (ActiveUser.key.isSelfcheckout == true) {\r\n                    // if(isMobileOnly == true){\r\n                    //     history.push('/selfcheckout')\r\n                    // }else{\r\n                    //  window.location = '/selfcheckout';\r\n                    //}\r\n\r\n                }\r\n                else {\r\n                    // if(isMobileOnly == true){\r\n                    //     history.push('/shopview')\r\n                    // }else{\r\n                    //     window.location = '/shopview';\r\n                    // }\r\n                }\r\n            }\r\n        })\r\n\r\n        //------------------------------------------\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    //  this.getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\r\n    return <div>\r\n        Product Loading...\r\n    </div>\r\n}\r\n\r\nexport default ProductLoader"],"mappings":"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"},"metadata":{},"sourceType":"module"}