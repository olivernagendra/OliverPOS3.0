{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { cashRecordsAPI, getDetailsAPI, openRegisterAPI, closeRegisterAPI, SaveClosingNoteAPI } from './CashManagementAPI';\nimport STATUSES from '../../constants/apiStatus';\nconst initialState = {\n  \"status\": STATUSES.IDLE,\n  \"data\": \"\",\n  \"error\": '',\n  \"is_success\": false\n};\nexport const openRegister = createAsyncThunk('openRegister/openRegisterAPI', async (parameter, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const response = await openRegisterAPI(parameter);\n    return response;\n  } catch (err) {\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const getDetails = createAsyncThunk('cashmanagementgetdetail/getDetailsAPI', async (parameter, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  // const response =  getDetailsAPI(parameter);\n  // // The value we return becomes the `fulfilled` action payload\n  // console.log(\"test\",response.json())\n  // return response.json();\n  try {\n    const response = await getDetailsAPI(parameter); // The value we return becomes the `fulfilled` action payload\n\n    return response;\n  } catch (err) {\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\n    // by explicitly returning it using the `rejectWithValue()` utility\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const cashRecords = createAsyncThunk('cashmanagement/cashRecordsAPI', async (parameter, _ref3) => {\n  let {\n    rejectWithValue\n  } = _ref3;\n\n  // const response =  cashRecordsAPI(parameter);\n  // // The value we return becomes the `fulfilled` action payload\n  // console.log(\"test\",response.json())\n  // return response.json();\n  try {\n    const response = await cashRecordsAPI(parameter); // The value we return becomes the `fulfilled` action payload\n\n    return response;\n  } catch (err) {\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\n    // by explicitly returning it using the `rejectWithValue()` utility\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const closeRegister = createAsyncThunk('cashmanagementCloseRegister/closeRegisterAPI', async (parameter, _ref4) => {\n  let {\n    rejectWithValue\n  } = _ref4;\n\n  // const response =  closeRegisterAPI(parameter);\n  // // The value we return becomes the `fulfilled` action payload\n  // console.log(\"test\",response.json())\n  // return response.json();\n  try {\n    const response = await closeRegisterAPI(parameter); // The value we return becomes the `fulfilled` action payload\n\n    return response;\n  } catch (err) {\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\n    // by explicitly returning it using the `rejectWithValue()` utility\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const SaveClosingNote = createAsyncThunk('cashmanagementCloseRegister/SaveClosingNoteAPI', async (parameter, _ref5) => {\n  let {\n    rejectWithValue\n  } = _ref5;\n\n  try {\n    const response = await SaveClosingNoteAPI(parameter); // The value we return becomes the `fulfilled` action payload\n\n    return response;\n  } catch (err) {\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\n    // by explicitly returning it using the `rejectWithValue()` utility\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const CashmanagementSlice = createSlice({\n  name: 'cashmanagement',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {// loginPanding:(state)=>{\n    //   state.status=STATUSES.LOADING;\n    //   state.data=\"\"\n    // },\n    // loginSuccess:(state,action)=>{\n    //   state.status=STATUSES.IDLE;\n    //   state.error='';\n    //   state.data=action.payload\n    // },\n    // loginFail:(state,action)=>{\n    //   state.status=STATUSES.ERROR;    \n    //   state.data=\"\";\n    //   state.error=action.payload;\n    // }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  // extraReducers: () => {}\n  extraReducers: builder => {\n    builder.addCase(cashRecords.pending, state => {\n      state.status = STATUSES.LOADING;\n      state.data = \"\";\n      state.error = \"\";\n      state.is_success = false;\n    }).addCase(cashRecords.fulfilled, (state, action) => {\n      state.status = action.payload && action.payload.is_success == true ? STATUSES.IDLE : STATUSES.ERROR;\n      state.data = action.payload && action.payload.is_success == true ? action.payload : \"\";\n      state.error = action.payload && action.payload.is_success == false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";\n      ;\n      state.is_success = action.payload && action.payload.is_success == true ? true : false;\n    }).addCase(cashRecords.rejected, (state, action) => {\n      state.status = STATUSES.IDLE;\n      state.data = \"\";\n      state.error = action.error;\n      state.is_success = false;\n    });\n  }\n});\nexport const {\n  loginPanding,\n  loginSuccess,\n  loginFail\n} = CashmanagementSlice.actions;\nexport const CashmanagementSecondSlice = createSlice({\n  name: 'cashmanagementgetdetail',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getDetails.pending, state => {\n      state.statusgetdetail = STATUSES.LOADING;\n      state.getdetail = \"\";\n      state.errorgetdetail = \"\";\n      state.is_successgetdetail = false;\n    }).addCase(getDetails.fulfilled, (state, action) => {\n      state.statusgetdetail = action.payload && action.payload.is_success == true ? STATUSES.IDLE : STATUSES.errorgetdetail;\n      state.getdetail = action.payload && action.payload.is_success == true ? action.payload : \"\";\n      state.errorgetdetail = action.payload && action.payload.is_success == false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";\n      ;\n      state.is_successgetdetail = action.payload && action.payload.is_success == true ? true : false;\n    }).addCase(getDetails.rejected, (state, action) => {\n      state.statusgetdetail = STATUSES.IDLE;\n      state.getdetail = \"\";\n      state.errorgetdetail = action.error;\n      state.is_successgetdetail = false;\n    });\n  }\n});\nexport const {} = CashmanagementSecondSlice.actions;\nexport const CashmanagementThirdSlice = createSlice({\n  name: 'openRegister',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(openRegister.pending, state => {\n      state.statusopenRegister = STATUSES.LOADING;\n      state.dataopenRegister = \"\";\n      state.erroropenRegister = \"\";\n      state.is_successopenRegister = false;\n    }).addCase(openRegister.fulfilled, (state, action) => {\n      state.statusopenRegister = action.payload && action.payload.is_success == true ? STATUSES.IDLE : STATUSES.ERROR;\n      state.dataopenRegister = action.payload && action.payload.is_success == true ? action.payload : \"\";\n      state.erroropenRegister = action.payload && action.payload.is_success == false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";\n      ;\n      state.is_successopenRegister = action.payload && action.payload.is_success == true ? true : false;\n    }).addCase(openRegister.rejected, (state, action) => {\n      state.statusopenRegister = STATUSES.IDLE;\n      state.dataopenRegister = \"\";\n      state.erroropenRegister = action.error;\n      state.is_successopenRegister = false;\n    });\n  }\n});\nexport const {} = CashmanagementThirdSlice.actions;\nexport const CashmanagementFourthSlice = createSlice({\n  name: 'cashmanagementCloseRegister',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(closeRegister.pending, state => {\n      state.statuscloseRegister = STATUSES.LOADING;\n      state.closeRegisterdetail = \"\";\n      state.errorcloseRegister = \"\";\n      state.is_successcloseRegister = false;\n    }).addCase(closeRegister.fulfilled, (state, action) => {\n      state.statuscloseRegister = action.payload && action.payload.is_success == true ? STATUSES.IDLE : STATUSES.ERROR;\n      state.closeRegisterdetail = action.payload && action.payload.is_success == true ? action.payload : \"\";\n      state.errorcloseRegister = action.payload && action.payload.is_success == false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";\n      ;\n      state.is_successcloseRegister = action.payload && action.payload.is_success == true ? true : false;\n    }).addCase(closeRegister.rejected, (state, action) => {\n      state.statuscloseRegister = STATUSES.IDLE;\n      state.closeRegisterdetail = \"\";\n      state.errorcloseRegister = action.error;\n      state.is_successcloseRegister = false;\n    });\n  }\n});\nexport const {} = CashmanagementFourthSlice.actions;\nexport const CashmanagementFifthSlice = createSlice({\n  name: 'cashmanagementSaveClosingNote',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(SaveClosingNote.pending, state => {\n      state.statusSaveClosingNote = STATUSES.LOADING;\n      state.SaveClosingNotedetail = \"\";\n      state.errorSaveClosingNote = \"\";\n      state.is_successSaveClosingNote = false;\n    }).addCase(SaveClosingNote.fulfilled, (state, action) => {\n      state.statusSaveClosingNote = action.payload && action.payload.is_success == true ? STATUSES.IDLE : STATUSES.ERROR;\n      state.SaveClosingNotedetail = action.payload && action.payload.is_success == true ? action.payload : \"\";\n      state.errorSaveClosingNote = action.payload && action.payload.is_success == false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";\n      ;\n      state.is_successSaveClosingNote = action.payload && action.payload.is_success == true ? true : false;\n    }).addCase(SaveClosingNote.rejected, (state, action) => {\n      state.statusSaveClosingNote = STATUSES.IDLE;\n      state.SaveClosingNotedetail = \"\";\n      state.errorSaveClosingNote = action.error;\n      state.is_successSaveClosingNote = false;\n    });\n  }\n});\nexport const {} = CashmanagementFifthSlice.actions; // // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state: RootState) => state.login.value)`\n// export const selectCount = (state) => state.login.value;\n// // We can also write thunks by hand, which may contain both sync and async logic.\n// // Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default {\n  CashmanagementSlice,\n  CashmanagementSecondSlice,\n  CashmanagementThirdSlice,\n  CashmanagementFourthSlice,\n  CashmanagementFifthSlice\n};","map":{"version":3,"names":["createAsyncThunk","createSlice","cashRecordsAPI","getDetailsAPI","openRegisterAPI","closeRegisterAPI","SaveClosingNoteAPI","STATUSES","initialState","IDLE","openRegister","parameter","rejectWithValue","response","err","data","getDetails","cashRecords","closeRegister","SaveClosingNote","CashmanagementSlice","name","reducers","extraReducers","builder","addCase","pending","state","status","LOADING","error","is_success","fulfilled","action","payload","ERROR","exceptions","rejected","loginPanding","loginSuccess","loginFail","actions","CashmanagementSecondSlice","statusgetdetail","getdetail","errorgetdetail","is_successgetdetail","CashmanagementThirdSlice","statusopenRegister","dataopenRegister","erroropenRegister","is_successopenRegister","CashmanagementFourthSlice","statuscloseRegister","closeRegisterdetail","errorcloseRegister","is_successcloseRegister","CashmanagementFifthSlice","statusSaveClosingNote","SaveClosingNotedetail","errorSaveClosingNote","is_successSaveClosingNote"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/cashmanagement/CashmanagementSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { cashRecordsAPI ,getDetailsAPI ,openRegisterAPI ,closeRegisterAPI,SaveClosingNoteAPI } from './CashManagementAPI'\r\nimport STATUSES from '../../constants/apiStatus';\r\n\r\n\r\nconst initialState = {\r\n  \"status\": STATUSES.IDLE,\r\n  \"data\": \"\", \r\n  \"error\":'',\r\n  \"is_success\":false\r\n};\r\n\r\nexport const openRegister = createAsyncThunk(\r\n  'openRegister/openRegisterAPI',\r\n  async (parameter,{rejectWithValue}) => {  \r\n   \r\n   try {\r\n     const response = await openRegisterAPI(parameter);\r\n          return response;\r\n   } catch (err) {\r\n    return rejectWithValue(err.response.data)\r\n  }\r\n         \r\n  }\r\n);\r\n\r\nexport const getDetails = createAsyncThunk(\r\n    'cashmanagementgetdetail/getDetailsAPI',\r\n    async (parameter,{rejectWithValue}) => {   \r\n      // const response =  getDetailsAPI(parameter);\r\n      // // The value we return becomes the `fulfilled` action payload\r\n      // console.log(\"test\",response.json())\r\n      // return response.json();\r\n  \r\n     try {\r\n       const response = await getDetailsAPI(parameter);\r\n            // The value we return becomes the `fulfilled` action payload\r\n            return response;\r\n     } catch (err) {\r\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n      // by explicitly returning it using the `rejectWithValue()` utility\r\n      return rejectWithValue(err.response.data)\r\n    }\r\n           \r\n    }\r\n  );\r\n\r\n  export const cashRecords = createAsyncThunk(\r\n    'cashmanagement/cashRecordsAPI',\r\n    async (parameter,{rejectWithValue}) => {   \r\n      // const response =  cashRecordsAPI(parameter);\r\n      // // The value we return becomes the `fulfilled` action payload\r\n      // console.log(\"test\",response.json())\r\n      // return response.json();\r\n  \r\n     try {\r\n       const response = await cashRecordsAPI(parameter);\r\n            // The value we return becomes the `fulfilled` action payload\r\n            return response;\r\n     } catch (err) {\r\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n      // by explicitly returning it using the `rejectWithValue()` utility\r\n      return rejectWithValue(err.response.data)\r\n    }\r\n           \r\n    }\r\n  );\r\n\r\n  export const closeRegister = createAsyncThunk(\r\n    'cashmanagementCloseRegister/closeRegisterAPI',\r\n    async (parameter,{rejectWithValue}) => {   \r\n      // const response =  closeRegisterAPI(parameter);\r\n      // // The value we return becomes the `fulfilled` action payload\r\n      // console.log(\"test\",response.json())\r\n      // return response.json();\r\n  \r\n     try {\r\n       const response = await closeRegisterAPI(parameter);\r\n            // The value we return becomes the `fulfilled` action payload\r\n            return response;\r\n     } catch (err) {\r\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n      // by explicitly returning it using the `rejectWithValue()` utility\r\n      return rejectWithValue(err.response.data)\r\n    }\r\n           \r\n    }\r\n  );\r\n\r\n  export const SaveClosingNote = createAsyncThunk(\r\n    'cashmanagementCloseRegister/SaveClosingNoteAPI',\r\n    async (parameter,{rejectWithValue}) => {\r\n     try {\r\n       const response = await SaveClosingNoteAPI(parameter);\r\n            // The value we return becomes the `fulfilled` action payload\r\n            return response;\r\n     } catch (err) {\r\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n      // by explicitly returning it using the `rejectWithValue()` utility\r\n      return rejectWithValue(err.response.data)\r\n    }\r\n           \r\n    }\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const CashmanagementSlice = createSlice({\r\n    name: 'cashmanagement',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: { \r\n      // loginPanding:(state)=>{\r\n      //   state.status=STATUSES.LOADING;\r\n      //   state.data=\"\"\r\n      // },\r\n      // loginSuccess:(state,action)=>{\r\n      //   state.status=STATUSES.IDLE;\r\n      //   state.error='';\r\n      //   state.data=action.payload\r\n      // },\r\n      // loginFail:(state,action)=>{\r\n      //   state.status=STATUSES.ERROR;    \r\n      //   state.data=\"\";\r\n      //   state.error=action.payload;\r\n      // }\r\n    },\r\n    // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n    // including actions generated by createAsyncThunk or in other slices.\r\n   // extraReducers: () => {}\r\n    extraReducers: (builder) => {    \r\n      builder     \r\n        .addCase(cashRecords.pending, (state) => {\r\n          state.status = STATUSES.LOADING;\r\n          state.data=\"\";\r\n          state.error=\"\";\r\n          state.is_success=false;\r\n        })\r\n        .addCase(cashRecords.fulfilled, (state, action) => {       \r\n            state.status = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.ERROR;\r\n            state.data=(action.payload && action.payload.is_success==true ?action.payload:\"\");  \r\n            state.error=action.payload && action.payload.is_success==false? action.payload.exceptions[0]: action.payload?\"Fail to fetch\":\"\";;\r\n            state.is_success=action.payload && action.payload.is_success==true? true: false;      \r\n        })\r\n        .addCase(cashRecords.rejected, (state,action) => {\r\n          state.status = STATUSES.IDLE;\r\n          state.data=\"\";\r\n          state.error = action.error;\r\n          state.is_success=false;\r\n        })\r\n    },\r\n  });\r\n  \r\n   export const { loginPanding, loginSuccess, loginFail } = CashmanagementSlice.actions;\r\n\r\n   \r\n\r\nexport const CashmanagementSecondSlice = createSlice({\r\n  name: 'cashmanagementgetdetail',\r\n  initialState,\r\n  reducers: { \r\n   \r\n  },\r\n  extraReducers: (builder) => {    \r\n    builder   \r\n      .addCase(getDetails.pending, (state) => {\r\n        state.statusgetdetail = STATUSES.LOADING;\r\n        state.getdetail=\"\";\r\n        state.errorgetdetail=\"\";\r\n        state.is_successgetdetail=false;\r\n      })\r\n      .addCase(getDetails.fulfilled, (state, action) => {       \r\n          state.statusgetdetail = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.errorgetdetail;\r\n          state.getdetail=(action.payload && action.payload.is_success==true ?action.payload:\"\");  \r\n          state.errorgetdetail=action.payload && action.payload.is_success==false? action.payload.exceptions[0]: action.payload?\"Fail to fetch\":\"\";;\r\n          state.is_successgetdetail=action.payload && action.payload.is_success==true? true: false;      \r\n      })\r\n      .addCase(getDetails.rejected, (state,action) => {\r\n        state.statusgetdetail = STATUSES.IDLE;\r\n        state.getdetail=\"\";\r\n        state.errorgetdetail = action.error;\r\n        state.is_successgetdetail=false;\r\n      })\r\n  },\r\n});\r\n\r\n\r\n export const {  } = CashmanagementSecondSlice.actions;\r\n  \r\n\r\n export const CashmanagementThirdSlice = createSlice({\r\n  name: 'openRegister',\r\n  initialState,\r\n  reducers: { \r\n   \r\n  },\r\n  extraReducers: (builder) => {    \r\n    builder   \r\n      .addCase(openRegister.pending, (state) => {\r\n        state.statusopenRegister = STATUSES.LOADING;\r\n        state.dataopenRegister=\"\";\r\n        state.erroropenRegister=\"\";\r\n        state.is_successopenRegister=false;\r\n      })\r\n      .addCase(openRegister.fulfilled, (state, action) => {       \r\n          state.statusopenRegister = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.ERROR;\r\n          state.dataopenRegister=(action.payload && action.payload.is_success==true ?action.payload:\"\");  \r\n          state.erroropenRegister=action.payload && action.payload.is_success==false? action.payload.exceptions[0]: action.payload?\"Fail to fetch\":\"\";;\r\n          state.is_successopenRegister=action.payload && action.payload.is_success==true? true: false;      \r\n      })\r\n      .addCase(openRegister.rejected, (state,action) => {\r\n        state.statusopenRegister = STATUSES.IDLE;\r\n        state.dataopenRegister=\"\";\r\n        state.erroropenRegister = action.error;\r\n        state.is_successopenRegister=false;\r\n      })\r\n  },\r\n});\r\n\r\n\r\n export const {  } = CashmanagementThirdSlice.actions;\r\n\r\n\r\n export const CashmanagementFourthSlice = createSlice({\r\n  name: 'cashmanagementCloseRegister',\r\n  initialState,\r\n  reducers: { \r\n   \r\n  },\r\n  extraReducers: (builder) => {    \r\n    builder   \r\n      .addCase(closeRegister.pending, (state) => {\r\n        state.statuscloseRegister = STATUSES.LOADING;\r\n        state.closeRegisterdetail=\"\";\r\n        state.errorcloseRegister=\"\";\r\n        state.is_successcloseRegister=false;\r\n      })\r\n      .addCase(closeRegister.fulfilled, (state, action) => {       \r\n          state.statuscloseRegister = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.ERROR;\r\n          state.closeRegisterdetail=(action.payload && action.payload.is_success==true ?action.payload:\"\");  \r\n          state.errorcloseRegister=action.payload && action.payload.is_success==false? action.payload.exceptions[0]: action.payload?\"Fail to fetch\":\"\";;\r\n          state.is_successcloseRegister=action.payload && action.payload.is_success==true? true: false;      \r\n      })\r\n      .addCase(closeRegister.rejected, (state,action) => {\r\n        state.statuscloseRegister = STATUSES.IDLE;\r\n        state.closeRegisterdetail=\"\";\r\n        state.errorcloseRegister = action.error;\r\n        state.is_successcloseRegister=false;\r\n      })\r\n  },\r\n});\r\n\r\n\r\n export const {  } = CashmanagementFourthSlice.actions;\r\n  \r\n export const CashmanagementFifthSlice = createSlice({\r\n  name: 'cashmanagementSaveClosingNote',\r\n  initialState,\r\n  reducers: { \r\n   \r\n  },\r\n  extraReducers: (builder) => {    \r\n    builder   \r\n      .addCase(SaveClosingNote.pending, (state) => {\r\n        state.statusSaveClosingNote = STATUSES.LOADING;\r\n        state.SaveClosingNotedetail=\"\";\r\n        state.errorSaveClosingNote=\"\";\r\n        state.is_successSaveClosingNote=false;\r\n      })\r\n      .addCase(SaveClosingNote.fulfilled, (state, action) => {       \r\n          state.statusSaveClosingNote = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.ERROR;\r\n          state.SaveClosingNotedetail=(action.payload && action.payload.is_success==true ?action.payload:\"\");  \r\n          state.errorSaveClosingNote=action.payload && action.payload.is_success==false? action.payload.exceptions[0]: action.payload?\"Fail to fetch\":\"\";;\r\n          state.is_successSaveClosingNote=action.payload && action.payload.is_success==true? true: false;      \r\n      })\r\n      .addCase(SaveClosingNote.rejected, (state,action) => {\r\n        state.statusSaveClosingNote = STATUSES.IDLE;\r\n        state.SaveClosingNotedetail=\"\";\r\n        state.errorSaveClosingNote = action.error;\r\n        state.is_successSaveClosingNote=false;\r\n      })\r\n  },\r\n});\r\n\r\n\r\n export const {  } = CashmanagementFifthSlice.actions;\r\n  \r\n  \r\n  // // The function below is called a selector and allows us to select a value from\r\n  // // the state. Selectors can also be defined inline where they're used instead of\r\n  // // in the slice file. For example: `useSelector((state: RootState) => state.login.value)`\r\n  // export const selectCount = (state) => state.login.value;\r\n  \r\n  // // We can also write thunks by hand, which may contain both sync and async logic.\r\n  // // Here's an example of conditionally dispatching actions based on current state.\r\n  // export const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  //   const currentValue = selectCount(getState());\r\n  //   if (currentValue % 2 === 1) {\r\n  //     dispatch(incrementByAmount(amount));\r\n  //   }\r\n  // };\r\n  \r\n  export default {CashmanagementSlice,CashmanagementSecondSlice,CashmanagementThirdSlice ,CashmanagementFourthSlice ,CashmanagementFifthSlice};"],"mappings":"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"},"metadata":{},"sourceType":"module"}