{"ast":null,"code":"import _regeneratorRuntime from\"D:/OliverPOS/OliverPOS3.0/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/OliverPOS/OliverPOS3.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';//import { useLoginMutation,useGetAllRegisterQuery } from '../../../components/login/loginService';\nimport{registerAPI_FirebaseRegister}from'./registerAPI';import STATUSES from'../../constants/apiStatus';var initialState={\"status\":STATUSES.IDLE,\"data\":\"\",\"error\":'',\"is_success\":false};export var firebaseRegister=createAsyncThunk('register/registerAPI_FirebaseRegister',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(parameter,_ref){var rejectWithValue,response;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:rejectWithValue=_ref.rejectWithValue;_context.prev=1;_context.next=4;return registerAPI_FirebaseRegister(parameter);case 4:response=_context.sent;return _context.abrupt(\"return\",response);case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);return _context.abrupt(\"return\",rejectWithValue(_context.t0.response.data));case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,8]]);}));return function(_x,_x2){return _ref2.apply(this,arguments);};}());export var firebaseRegisterSlice=createSlice({name:'firebaseRegister',initialState:initialState,// The `reducers` field lets us define reducers and generate associated actions\nreducers:{// loginPanding:(state)=>{\n//   state.status=STATUSES.LOADING;\n//   state.data=\"\"\n// },\n// loginSuccess:(state,action)=>{\n//   state.status=STATUSES.IDLE;\n//   state.error='';\n//   state.data=action.payload\n// },\n// loginFail:(state,action)=>{\n//   state.status=STATUSES.ERROR;    \n//   state.data=\"\";\n//   state.error=action.payload;\n// }\n},// The `extraReducers` field lets the slice handle actions defined elsewhere,\n// including actions generated by createAsyncThunk or in other slices.\n// extraReducers: () => {}\nextraReducers:function extraReducers(builder){builder.addCase(firebaseRegister.pending,function(state){state.status=STATUSES.LOADING;state.data=\"\";state.error=\"\";state.is_success=false;}).addCase(firebaseRegister.fulfilled,function(state,action){state.status=action.payload&&action.payload.is_success==true?STATUSES.IDLE:STATUSES.ERROR;state.data=action.payload&&action.payload.is_success==true?action.payload:\"\";state.error=action.payload&&action.payload.is_success==false?action.payload.exceptions[0]:action.payload?\"Fail to fetch\":\"\";;state.is_success=action.payload&&action.payload.is_success==true?true:false;}).addCase(firebaseRegister.rejected,function(state,action){state.status=STATUSES.IDLE;state.data=\"\";state.error=action.error;state.is_success=false;});}});var _firebaseRegisterSlic=firebaseRegisterSlice.actions,loginPanding=_firebaseRegisterSlic.loginPanding,loginSuccess=_firebaseRegisterSlic.loginSuccess,loginFail=_firebaseRegisterSlic.loginFail;// // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state: RootState) => state.login.value)`\n// export const selectCount = (state) => state.login.value;\n// // We can also write thunks by hand, which may contain both sync and async logic.\n// // Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\nexport{loginPanding,loginSuccess,loginFail};export default firebaseRegisterSlice;","map":{"version":3,"names":["createAsyncThunk","createSlice","registerAPI_FirebaseRegister","STATUSES","initialState","IDLE","firebaseRegister","parameter","rejectWithValue","response","data","firebaseRegisterSlice","name","reducers","extraReducers","builder","addCase","pending","state","status","LOADING","error","is_success","fulfilled","action","payload","ERROR","exceptions","rejected","actions","loginPanding","loginSuccess","loginFail"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/register/firebaseRegisterSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n//import { useLoginMutation,useGetAllRegisterQuery } from '../../../components/login/loginService';\r\nimport {registerAPI_FirebaseRegister} from './registerAPI';\r\nimport STATUSES from '../../constants/apiStatus';\r\n\r\n\r\nconst initialState = {\r\n  \"status\": STATUSES.IDLE,\r\n  \"data\": \"\", \r\n  \"error\":'',\r\n  \"is_success\":false\r\n};\r\n\r\n\r\nexport const firebaseRegister = createAsyncThunk(\r\n  'register/registerAPI_FirebaseRegister',\r\n  async (parameter,{rejectWithValue}) => {   \r\n    // const response =  loginAPI(parameter);\r\n    // // The value we return becomes the `fulfilled` action payload\r\n    // console.log(\"test\",response.json())\r\n    // return response.json();\r\n\r\n   try {\r\n     const response = await registerAPI_FirebaseRegister(parameter);\r\n          // The value we return becomes the `fulfilled` action payload\r\n          return response;\r\n   } catch (err) {\r\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n    // by explicitly returning it using the `rejectWithValue()` utility\r\n    return rejectWithValue(err.response.data)\r\n  }\r\n         \r\n  }\r\n);\r\nexport const firebaseRegisterSlice = createSlice({\r\n  name: 'firebaseRegister',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: { \r\n    // loginPanding:(state)=>{\r\n    //   state.status=STATUSES.LOADING;\r\n    //   state.data=\"\"\r\n    // },\r\n    // loginSuccess:(state,action)=>{\r\n    //   state.status=STATUSES.IDLE;\r\n    //   state.error='';\r\n    //   state.data=action.payload\r\n    // },\r\n    // loginFail:(state,action)=>{\r\n    //   state.status=STATUSES.ERROR;    \r\n    //   state.data=\"\";\r\n    //   state.error=action.payload;\r\n    // }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n // extraReducers: () => {}\r\n  extraReducers: (builder) => {    \r\n    builder     \r\n      .addCase(firebaseRegister.pending, (state) => {\r\n        state.status = STATUSES.LOADING;\r\n        state.data=\"\";\r\n        state.error=\"\";\r\n        state.is_success=false;\r\n      })\r\n      .addCase(firebaseRegister.fulfilled, (state, action) => {       \r\n          state.status = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.ERROR;\r\n          state.data=(action.payload && action.payload.is_success==true ?action.payload:\"\");  \r\n          state.error=action.payload && action.payload.is_success==false? action.payload.exceptions[0]: action.payload?\"Fail to fetch\":\"\";;\r\n          state.is_success=action.payload && action.payload.is_success==true? true: false;      \r\n      })\r\n      .addCase(firebaseRegister.rejected, (state,action) => {\r\n        state.status = STATUSES.IDLE;\r\n        state.data=\"\";\r\n        state.error = action.error;\r\n        state.is_success=false;\r\n      });\r\n  },\r\n});\r\n\r\n export const { loginPanding, loginSuccess, loginFail } = firebaseRegisterSlice.actions;\r\n\r\n// // The function below is called a selector and allows us to select a value from\r\n// // the state. Selectors can also be defined inline where they're used instead of\r\n// // in the slice file. For example: `useSelector((state: RootState) => state.login.value)`\r\n// export const selectCount = (state) => state.login.value;\r\n\r\n// // We can also write thunks by hand, which may contain both sync and async logic.\r\n// // Here's an example of conditionally dispatching actions based on current state.\r\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n//   const currentValue = selectCount(getState());\r\n//   if (currentValue % 2 === 1) {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }\r\n// };\r\n\r\nexport default firebaseRegisterSlice;\r\n"],"mappings":"8OAAA,OAASA,gBAAT,CAA2BC,WAA3B,KAA8C,kBAA9C,CACA;AACA,OAAQC,4BAAR,KAA2C,eAA3C,CACA,MAAOC,SAAP,KAAqB,2BAArB,CAGA,GAAMC,aAAY,CAAG,CACnB,SAAUD,QAAQ,CAACE,IADA,CAEnB,OAAQ,EAFW,CAGnB,QAAQ,EAHW,CAInB,aAAa,KAJM,CAArB,CAQA,MAAO,IAAMC,iBAAgB,CAAGN,gBAAgB,CAC9C,uCAD8C,6FAE9C,iBAAOO,SAAP,sJAAkBC,eAAlB,MAAkBA,eAAlB,uCAO0BN,6BAA4B,CAACK,SAAD,CAPtD,QAOSE,QAPT,+CASeA,QATf,0FAaSD,eAAe,CAAC,YAAIC,QAAJ,CAAaC,IAAd,CAbxB,sEAF8C,oEAAzC,CAoBP,MAAO,IAAMC,sBAAqB,CAAGV,WAAW,CAAC,CAC/CW,IAAI,CAAE,kBADyC,CAE/CR,YAAY,CAAZA,YAF+C,CAG/C;AACAS,QAAQ,CAAE,CACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdQ,CAJqC,CAoB/C;AACA;AACD;AACCC,aAAa,CAAE,uBAACC,OAAD,CAAa,CAC1BA,OAAO,CACJC,OADH,CACWV,gBAAgB,CAACW,OAD5B,CACqC,SAACC,KAAD,CAAW,CAC5CA,KAAK,CAACC,MAAN,CAAehB,QAAQ,CAACiB,OAAxB,CACAF,KAAK,CAACR,IAAN,CAAW,EAAX,CACAQ,KAAK,CAACG,KAAN,CAAY,EAAZ,CACAH,KAAK,CAACI,UAAN,CAAiB,KAAjB,CACD,CANH,EAOGN,OAPH,CAOWV,gBAAgB,CAACiB,SAP5B,CAOuC,SAACL,KAAD,CAAQM,MAAR,CAAmB,CACpDN,KAAK,CAACC,MAAN,CAAeK,MAAM,CAACC,OAAP,EAAkBD,MAAM,CAACC,OAAP,CAAeH,UAAf,EAA2B,IAA7C,CAAmDnB,QAAQ,CAACE,IAA5D,CAAkEF,QAAQ,CAACuB,KAA1F,CACAR,KAAK,CAACR,IAAN,CAAYc,MAAM,CAACC,OAAP,EAAkBD,MAAM,CAACC,OAAP,CAAeH,UAAf,EAA2B,IAA7C,CAAmDE,MAAM,CAACC,OAA1D,CAAkE,EAA9E,CACAP,KAAK,CAACG,KAAN,CAAYG,MAAM,CAACC,OAAP,EAAkBD,MAAM,CAACC,OAAP,CAAeH,UAAf,EAA2B,KAA7C,CAAoDE,MAAM,CAACC,OAAP,CAAeE,UAAf,CAA0B,CAA1B,CAApD,CAAkFH,MAAM,CAACC,OAAP,CAAe,eAAf,CAA+B,EAA7H,CAAgI,CAChIP,KAAK,CAACI,UAAN,CAAiBE,MAAM,CAACC,OAAP,EAAkBD,MAAM,CAACC,OAAP,CAAeH,UAAf,EAA2B,IAA7C,CAAmD,IAAnD,CAAyD,KAA1E,CACH,CAZH,EAaGN,OAbH,CAaWV,gBAAgB,CAACsB,QAb5B,CAasC,SAACV,KAAD,CAAOM,MAAP,CAAkB,CACpDN,KAAK,CAACC,MAAN,CAAehB,QAAQ,CAACE,IAAxB,CACAa,KAAK,CAACR,IAAN,CAAW,EAAX,CACAQ,KAAK,CAACG,KAAN,CAAcG,MAAM,CAACH,KAArB,CACAH,KAAK,CAACI,UAAN,CAAiB,KAAjB,CACD,CAlBH,EAmBD,CA3C8C,CAAD,CAAzC,CA8CC,0BAAkDX,qBAAqB,CAACkB,OAAxE,CAAQC,YAAR,uBAAQA,YAAR,CAAsBC,YAAtB,uBAAsBA,YAAtB,CAAoCC,SAApC,uBAAoCA,SAApC,CAER;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;4CAEA,cAAerB,sBAAf"},"metadata":{},"sourceType":"module"}