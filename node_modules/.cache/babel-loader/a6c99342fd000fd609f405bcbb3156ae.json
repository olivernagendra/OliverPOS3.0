{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; //import { useLoginMutation,useGetAllRegisterQuery } from '../../../components/login/loginService';\n\nimport { tileAPI } from './tileAPI';\nimport STATUSES from '../../../constants/apiStatus';\nconst initialState = {\n  \"status\": STATUSES.IDLE,\n  \"data\": \"\",\n  \"error\": '',\n  \"is_success\": false\n};\nexport const tile = createAsyncThunk('tile/tileAPI', async (parameter, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  // const response =  loginAPI(parameter);\n  // // The value we return becomes the `fulfilled` action payload\n  // console.log(\"test\",response.json())\n  // return response.json();\n  try {\n    const response = await tileAPI(parameter); // The value we return becomes the `fulfilled` action payload\n\n    return response;\n  } catch (err) {\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\n    // by explicitly returning it using the `rejectWithValue()` utility\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const tileSlice = createSlice({\n  name: 'tile',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {// loginPanding:(state)=>{\n    //   state.status=STATUSES.LOADING;\n    //   state.data=\"\"\n    // },\n    // loginSuccess:(state,action)=>{\n    //   state.status=STATUSES.IDLE;\n    //   state.error='';\n    //   state.data=action.payload\n    // },\n    // loginFail:(state,action)=>{\n    //   state.status=STATUSES.ERROR;    \n    //   state.data=\"\";\n    //   state.error=action.payload;\n    // }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  // extraReducers: () => {}\n  extraReducers: builder => {\n    builder.addCase(tile.pending, state => {\n      state.status = STATUSES.LOADING;\n      state.data = \"\";\n      state.error = \"\";\n      state.is_success = false;\n    }).addCase(tile.fulfilled, (state, action) => {\n      state.status = action.payload && action.payload.is_success === true ? STATUSES.IDLE : STATUSES.ERROR;\n      state.data = action.payload && action.payload.is_success === true ? action.payload : \"\";\n      state.error = action.payload && action.payload.is_success === false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";\n      ;\n      state.is_success = action.payload && action.payload.is_success === true ? true : false;\n    }).addCase(tile.rejected, (state, action) => {\n      state.status = STATUSES.IDLE;\n      state.data = \"\";\n      state.error = action.error;\n      state.is_success = false;\n    });\n  }\n});\nexport const {\n  loginPanding,\n  loginSuccess,\n  loginFail\n} = tileSlice.actions; // // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state: RootState) => state.login.value)`\n// export const selectCount = (state) => state.login.value;\n// // We can also write thunks by hand, which may contain both sync and async logic.\n// // Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default tileSlice;","map":{"version":3,"names":["createAsyncThunk","createSlice","tileAPI","STATUSES","initialState","IDLE","tile","parameter","rejectWithValue","response","err","data","tileSlice","name","reducers","extraReducers","builder","addCase","pending","state","status","LOADING","error","is_success","fulfilled","action","payload","ERROR","exceptions","rejected","loginPanding","loginSuccess","loginFail","actions"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/dashboard/tiles/tileSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n//import { useLoginMutation,useGetAllRegisterQuery } from '../../../components/login/loginService';\r\nimport {tileAPI} from './tileAPI';\r\nimport STATUSES from '../../../constants/apiStatus';\r\n\r\n\r\nconst initialState = {\r\n  \"status\": STATUSES.IDLE,\r\n  \"data\": \"\", \r\n  \"error\":'',\r\n  \"is_success\":false\r\n};\r\n\r\n\r\nexport const tile = createAsyncThunk(\r\n  'tile/tileAPI',\r\n  async (parameter,{rejectWithValue}) => {   \r\n    // const response =  loginAPI(parameter);\r\n    // // The value we return becomes the `fulfilled` action payload\r\n    // console.log(\"test\",response.json())\r\n    // return response.json();\r\n\r\n   try {\r\n     const response = await tileAPI(parameter);\r\n          // The value we return becomes the `fulfilled` action payload\r\n          return response;\r\n   } catch (err) {\r\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n    // by explicitly returning it using the `rejectWithValue()` utility\r\n    return rejectWithValue(err.response.data)\r\n  }\r\n         \r\n  }\r\n);\r\nexport const tileSlice = createSlice({\r\n  name: 'tile',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: { \r\n    // loginPanding:(state)=>{\r\n    //   state.status=STATUSES.LOADING;\r\n    //   state.data=\"\"\r\n    // },\r\n    // loginSuccess:(state,action)=>{\r\n    //   state.status=STATUSES.IDLE;\r\n    //   state.error='';\r\n    //   state.data=action.payload\r\n    // },\r\n    // loginFail:(state,action)=>{\r\n    //   state.status=STATUSES.ERROR;    \r\n    //   state.data=\"\";\r\n    //   state.error=action.payload;\r\n    // }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n // extraReducers: () => {}\r\n  extraReducers: (builder) => {    \r\n    builder     \r\n      .addCase(tile.pending, (state) => {\r\n        state.status = STATUSES.LOADING;\r\n        state.data=\"\";\r\n        state.error=\"\";\r\n        state.is_success=false;\r\n      })\r\n      .addCase(tile.fulfilled, (state, action) => {       \r\n          state.status = action.payload && action.payload.is_success===true? STATUSES.IDLE: STATUSES.ERROR;\r\n          state.data=(action.payload && action.payload.is_success===true ?action.payload:\"\");  \r\n          state.error=action.payload && action.payload.is_success===false? action.payload.exceptions[0]: action.payload?\"Fail to fetch\":\"\";;\r\n          state.is_success=action.payload && action.payload.is_success===true? true: false;      \r\n      })\r\n      .addCase(tile.rejected, (state,action) => {\r\n        state.status = STATUSES.IDLE;\r\n        state.data=\"\";\r\n        state.error = action.error;\r\n        state.is_success=false;\r\n      });\r\n  },\r\n});\r\n\r\n export const { loginPanding, loginSuccess, loginFail } = tileSlice.actions;\r\n\r\n// // The function below is called a selector and allows us to select a value from\r\n// // the state. Selectors can also be defined inline where they're used instead of\r\n// // in the slice file. For example: `useSelector((state: RootState) => state.login.value)`\r\n// export const selectCount = (state) => state.login.value;\r\n\r\n// // We can also write thunks by hand, which may contain both sync and async logic.\r\n// // Here's an example of conditionally dispatching actions based on current state.\r\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n//   const currentValue = selectCount(getState());\r\n//   if (currentValue % 2 === 1) {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }\r\n// };\r\n\r\nexport default tileSlice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}