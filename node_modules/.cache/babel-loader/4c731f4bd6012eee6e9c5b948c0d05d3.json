{"ast":null,"code":"var _jsxFileName = \"D:\\\\OliverPOS\\\\OliverPOS3.0\\\\src\\\\components\\\\loadProduct\\\\ProductLoader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteDB, openDB } from 'idb';\nimport { get_UDid } from '../common/localSettings';\nimport Config from '../../Config';\nimport { receiptSetting } from '../serverSetting/receiptSettingSlice';\nimport ActiveUser from '../../settings/ActiveUser';\nimport { taxSetting } from '../serverSetting/taxSettingSlice';\nimport STATUSES from '../../constants/apiStatus';\nimport { productCount } from './productCountSlice';\nimport { productLoader } from './loadProductSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { useIndexedDB } from 'react-indexed-db'; //import LoaderOnboarding from '../onboarding/components/LoaderOnboarding'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductLoader = () => {\n  _s();\n\n  const {\n    add,\n    update,\n    getByID\n  } = useIndexedDB(\"people\");\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [loadingProducts, setLoadingProducts] = useState(0);\n  const [loadPerc, setLoadPerc] = useState(0); //........Test--------------------------\n\n  const UpdateIndexDB = async (udid, ProductArray, RedirectUrl) => {\n    // ProductArray && ProductArray.length>0 && ProductArray\n    var _state = {\n      \"WPID\": 101,\n      \"name\": \"nagendra\",\n      \"age\": 32\n    };\n    add(_state).then(key => {\n      console.log(\"ID Generated: \", key); //   let newState = Object.assign({}, state);\n      //   newState.id = key;\n      //   setState(newState);\n      //   history.goBack();\n    }, error => {\n      console.log(error);\n    });\n  }; //........................\n  // const UpdateIndexDB = async (udid, ProductArray, RedirectUrl) => {\n  //     var TotaltotalRecord = localStorage.getItem('productcount');\n  //     console.log(\"ProductCount\", TotaltotalRecord)\n  //     var _perc = 0;\n  //     if (ProductArray && ProductArray.length > 0 && TotaltotalRecord && TotaltotalRecord > 0) {\n  //         _perc = ((ProductArray.length * 100) / TotaltotalRecord).toFixed(0);\n  //     }\n  //     // this.setState({ loadPerc: _perc });    \n  //     // const dbPromise = openDB(\"ProductDB\", 1, {\n  //     //     upgrade(db, oldVersion, newVersion, transaction) {\n  //     //         db.createObjectStore(udid);\n  //     //     },\n  //     //     blocked() {\n  //     //         // …\n  //     //     },\n  //     //     blocking() {\n  //     //         // …\n  //     //     },\n  //     //     terminated() {\n  //     //         // …\n  //     //     },\n  //     // });\n  //     console.log(\"test1\")\n  //     const dbPromise = openDB('POSDB', 1, {\n  //         upgrade(db) {\n  //             db.createObjectStore(udid);\n  //         },\n  //     });\n  //     const idbKeyval = {\n  //         async get(key) {\n  //             const db = await dbPromise;\n  //             return db.transaction(udid).objectStore(udid).get(key);\n  //         },\n  //         async set(key, val) {\n  //             const db = await dbPromise;\n  //             const tx = db.transaction(udid, 'readwrite');\n  //             tx.objectStore(udid).put(val, key);\n  //             return tx.complete;\n  //         },\n  //     };\n  //     // for unique array----------------------\n  //     const arrayUniqueByKey = [...new Map(ProductArray.map(item =>\n  //         [item['WPID'], item])).values()];\n  //     console.log(\"test2\")\n  //     idbKeyval.set('ProductList', arrayUniqueByKey);\n  //     console.log(\"test3\", arrayUniqueByKey)\n  //     // idbKeyval.get('ProductList').then(val => {\n  //     //     if (ProductArray.length == 0 || !val || val.length == 0 || val == null || val == \"\") {\n  //     //         console.log(\"wait...\");\n  //     //     } else {\n  //     //         if (ActiveUser.key.isSelfcheckout == true) {\n  //     //             // if(isMobileOnly == true){\n  //     //             //     navigate('/selfcheckout')\n  //     //             // }else{\n  //     //             //  navigate( '/selfcheckout');\n  //     //             //}\n  //     //         }\n  //     //         else {\n  //     //             // if(isMobileOnly == true){\n  //     //             //     navigate('/home')\n  //     //             // }else{\n  //     //             //     navigate( '/home');\n  //     //             // }\n  //     //         }\n  //     //     }\n  //     // })\n  //     //------------------------------------------\n  // }\n\n\n  const getProductList = (pn, pz, pl, trc) => {\n    if (trc != 0) {\n      var _perc = (pl.length * 100 / trc).toFixed(0);\n\n      setLoadingProducts(\"Synched \" + pl.length + \" Products, Out of \" + trc + \"\");\n      setLoadPerc(_perc); // this.setState({ loadingProducts: \"Synched \" + pl.length + \" Products, Out of \" + trc + \"\",loadPerc: _perc });          \n    }\n\n    var self = this;\n\n    if (!localStorage.getItem('user') || !sessionStorage.getItem(\"issuccess\")) {//redirectToURL()\n      // navigate('/loginpin');\n    }\n\n    var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/home';\n    var udid = get_UDid(localStorage.getItem(\"UDID\"));\n    var reloadCount = localStorage.getItem(\"ReloadCount\") ? localStorage.getItem(\"ReloadCount\") : 0;\n    var WarehouseId = localStorage.getItem(\"WarehouseId\") ? parseInt(localStorage.getItem(\"WarehouseId\")) : 0;\n    var pageNumber = pn;\n    var pageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n    var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n    var ProductArray = pl;\n    var TotaltotalRecord = trc;\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        \"access-control-allow-origin\": \"*\",\n        \"access-control-allow-credentials\": \"true\",\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\"))\n      },\n      mode: 'cors'\n    };\n    var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n\n    if (isDemoUser == true) {\n      requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid');\n    }\n\n    if (TotaltotalRecord == 0 && isDemoUser == false) {\n      // navigate( RedirectUrl) ;  \n      console.log(\"test4\");\n      UpdateIndexDB(udid, ProductArray, RedirectUrl);\n    } // call firstTime------------------\n    //  call common service\n    //  serverRequest.clientServiceRequest('GET', `/ShopData/GetProductPageUpdatedWithCount?udid=${udid}&pageNumber=${pageNumber}&pageSize=${PageSize}`, '')\n    //dispatch(productLoader({ pageNumber, pageSize, WarehouseId }))\n    //console.log(\"resData\", resData)\n\n\n    fetch(`${Config.key.OP_API_URL}/v1/Product/Records?pageNumber=${pageNumber}&pageSize=${PageSize}&WarehouseId=${WarehouseId}`, requestOptions).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(response.statusText); // throw an error if there's something wrong with the response\n    }).then(function handleData(data) {\n      var reloadCount = localStorage.getItem(\"ReloadCount\");\n      ProductArray = [...new Set([...ProductArray, ...data.content.Records])]; //check dataExist into indexdb-------------------------\n\n      var isExist = false;\n      console.log(\"--------------Total Products count--------\" + TotaltotalRecord);\n      console.log(\"Test\", TotaltotalRecord, ProductArray.length);\n\n      if (isDemoUser == false && TotaltotalRecord > ProductArray.length && (TotaltotalRecord != ProductArray.length || pageNumber <= TotaltotalRecord / PageSize * 1.0)) {\n        console.log(\"--------------Product list request time--------\" + new Date()); // self.UpdateIndexDB(udid,ProductArray);\n\n        pageNumber++; //console.log(\"ProductArray1\",ProductArray.length)     \n\n        console.log(\"test5\");\n        getProductList(pageNumber, PageSize, ProductArray, TotaltotalRecord);\n        console.log(\"test6\");\n      } else {\n        console.log(\"--------------all records are done-----------\"); //console.log(\"ProductArray2\",ProductArray.length)                        \n\n        UpdateIndexDB(udid, ProductArray, RedirectUrl);\n        navigate('/home');\n      }\n    }).catch(function handleError(error) {\n      console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\n      var reloadCount = localStorage.getItem(\"ReloadCount\"); // handle errors here\n\n      if (reloadCount < 3) {\n        localStorage.setItem(\"ReloadCount\", parseInt(reloadCount) + 1);\n        setTimeout(function () {\n          navigate('/'); //Reload to get product\n          // navigate( '/home')\n        }, 1000);\n        navigate('/home');\n      }\n    });\n  }; //Getting the receipt and tax setting--------------------    \n  // const [resProductLoad] = useSelector((state) => [state.productloader])\n  // console.log(\"resProductLoad\", resProductLoad)\n\n\n  const [respReceiptSetting, respTaxSetting, resProlductCount] = useSelector(state => [state.receiptsetting, state.taxsetting, state.productcount]); // console.log(\"respReceiptSetting\", respTaxSetting)\n\n  if (respReceiptSetting && respReceiptSetting.status == STATUSES.IDLE && respReceiptSetting.is_success) {\n    localStorage.setItem('orderreciept', JSON.stringify(respReceiptSetting.data.content));\n  }\n\n  if (respTaxSetting && respTaxSetting.status == STATUSES.IDLE && respTaxSetting.is_success) {\n    localStorage.setItem('TAX_SETTING', JSON.stringify(respTaxSetting.data.content));\n  }\n\n  if (resProlductCount && resProlductCount.status == STATUSES.IDLE && resProlductCount.is_success) {\n    localStorage.setItem('productcount', JSON.stringify(resProlductCount.data.content.count));\n  }\n\n  let useCancelled = false;\n  useEffect(() => {\n    if (useCancelled == false) {\n      fetchData();\n    }\n\n    return () => {\n      useCancelled = true;\n    };\n  }, []);\n\n  const fetchData = async () => {\n    //calling multiple api\n    var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n    var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/home';\n    var udid = get_UDid(localStorage.getItem(\"UDID\"));\n    var pcount = localStorage.getItem('productcount');\n\n    if (isDemoUser == false) {\n      if (pcount == null || typeof pcount == 'undefined' || pcount == 0) {//navigate(RedirectUrl);\n      }\n\n      UpdateIndexDB(udid, [], RedirectUrl);\n    } //------------------------------------------------\n\n\n    localStorage.setItem(\"ProductLoad\", \"true\");\n    console.log(\"--------------Product list request First time--------\" + new Date());\n    getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount); //------------------------------------------------- \n\n    dispatch(productCount(udid));\n    dispatch(receiptSetting());\n    dispatch(taxSetting());\n  }; // if (respReceiptSetting && respReceiptSetting.is_success\n  //     && respTaxSetting && respTaxSetting.is_success\n  //     && resProlductCount && resProlductCount.is_success) {\n  //To Clear indexDB----------------------------\n  //}\n  // const createIndexDB=(udid, ProductArray, RedirectUrl)=>{\n  //     (async () => {\n  //         if (!('indexedDB' in window)) {\n  //             console.warn('IndexedDB not supported')\n  //             return\n  //           }\n  //           const dbName = 'POSdb'\n  //           const storeName = 'product_'+udid\n  //           const version = 1 //versions start at 1\n  //           //delete Database\n  //           await deleteDB(dbName)\n  //           const db = await openDB(dbName, version, {\n  //             upgrade(db, oldVersion, newVersion, transaction) {\n  //               const store = db.createObjectStore(storeName,{ autoIncrement: true })   //  \"id\"         \n  //             }\n  //           })\n  //           const tx = db.transaction(storeName, 'readwrite')\n  //           const store = await tx.objectStore(storeName)\n  //           const val = 'hey!'\n  //           const key = 'Hello again'\n  //           ProductArray.forEach(element => {\n  //              const value =  store.put(element)\n  //           });\n  //           await tx.done\n  //         })()\n  // }\n  //  this.getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Product Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", loadingProducts, \" ( \", loadPerc, \")% \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 9\n    }, this), \"; ;\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProductLoader, \"mXR+YEgd7EepAg2T/ZeXuF4qoo0=\", false, function () {\n  return [useIndexedDB, useNavigate, useDispatch, useSelector];\n});\n\n_c = ProductLoader;\nexport default ProductLoader;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductLoader\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","deleteDB","openDB","get_UDid","Config","receiptSetting","ActiveUser","taxSetting","STATUSES","productCount","productLoader","useNavigate","useIndexedDB","ProductLoader","add","update","getByID","navigate","dispatch","loadingProducts","setLoadingProducts","loadPerc","setLoadPerc","UpdateIndexDB","udid","ProductArray","RedirectUrl","_state","then","key","console","log","error","getProductList","pn","pz","pl","trc","_perc","length","toFixed","self","localStorage","getItem","sessionStorage","isSelfcheckout","reloadCount","WarehouseId","parseInt","pageNumber","pageSize","FETCH_PRODUCTS_PAGESIZE","PageSize","TotaltotalRecord","requestOptions","method","headers","btoa","mode","isDemoUser","fetch","OP_API_URL","response","ok","json","Error","statusText","handleData","data","Set","content","Records","isExist","Date","catch","handleError","JSON","stringify","setItem","setTimeout","respReceiptSetting","respTaxSetting","resProlductCount","state","receiptsetting","taxsetting","productcount","status","IDLE","is_success","count","useCancelled","fetchData","pcount"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/loadProduct/ProductLoader.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteDB, openDB } from 'idb';\n\nimport { get_UDid } from '../common/localSettings'\nimport Config from '../../Config';\nimport { receiptSetting } from '../serverSetting/receiptSettingSlice';\nimport ActiveUser from '../../settings/ActiveUser';\nimport { taxSetting } from '../serverSetting/taxSettingSlice';\nimport STATUSES from '../../constants/apiStatus';\nimport { productCount } from './productCountSlice';\nimport { productLoader } from './loadProductSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { useIndexedDB } from 'react-indexed-db';\n\n//import LoaderOnboarding from '../onboarding/components/LoaderOnboarding'\nconst ProductLoader = () => {\n    const { add, update, getByID } = useIndexedDB(\"people\");\n    const navigate = useNavigate();\n    const dispatch = useDispatch()\n    const [loadingProducts, setLoadingProducts] = useState(0)\n    const [loadPerc, setLoadPerc] = useState(0)\n\n    //........Test--------------------------\n    const UpdateIndexDB = async (udid, ProductArray, RedirectUrl) => {\n        // ProductArray && ProductArray.length>0 && ProductArray\n\n        var _state = { \"WPID\": 101, \"name\": \"nagendra\", \"age\": 32 }\n        add(_state).then(\n            (key) => {\n                console.log(\"ID Generated: \", key);\n                //   let newState = Object.assign({}, state);\n                //   newState.id = key;\n                //   setState(newState);\n                //   history.goBack();\n            },\n            (error) => {\n                console.log(error);\n            }\n        )\n    }\n    //........................\n    // const UpdateIndexDB = async (udid, ProductArray, RedirectUrl) => {\n    //     var TotaltotalRecord = localStorage.getItem('productcount');\n    //     console.log(\"ProductCount\", TotaltotalRecord)\n    //     var _perc = 0;\n    //     if (ProductArray && ProductArray.length > 0 && TotaltotalRecord && TotaltotalRecord > 0) {\n    //         _perc = ((ProductArray.length * 100) / TotaltotalRecord).toFixed(0);\n    //     }\n    //     // this.setState({ loadPerc: _perc });    \n    //     // const dbPromise = openDB(\"ProductDB\", 1, {\n    //     //     upgrade(db, oldVersion, newVersion, transaction) {\n    //     //         db.createObjectStore(udid);\n    //     //     },\n    //     //     blocked() {\n    //     //         // …\n    //     //     },\n    //     //     blocking() {\n    //     //         // …\n    //     //     },\n    //     //     terminated() {\n    //     //         // …\n    //     //     },\n    //     // });\n    //     console.log(\"test1\")\n    //     const dbPromise = openDB('POSDB', 1, {\n    //         upgrade(db) {\n    //             db.createObjectStore(udid);\n    //         },\n    //     });\n\n\n    //     const idbKeyval = {\n    //         async get(key) {\n    //             const db = await dbPromise;\n    //             return db.transaction(udid).objectStore(udid).get(key);\n    //         },\n    //         async set(key, val) {\n    //             const db = await dbPromise;\n    //             const tx = db.transaction(udid, 'readwrite');\n    //             tx.objectStore(udid).put(val, key);\n    //             return tx.complete;\n    //         },\n    //     };\n    //     // for unique array----------------------\n    //     const arrayUniqueByKey = [...new Map(ProductArray.map(item =>\n    //         [item['WPID'], item])).values()];\n    //     console.log(\"test2\")\n    //     idbKeyval.set('ProductList', arrayUniqueByKey);\n    //     console.log(\"test3\", arrayUniqueByKey)\n    //     // idbKeyval.get('ProductList').then(val => {\n    //     //     if (ProductArray.length == 0 || !val || val.length == 0 || val == null || val == \"\") {\n    //     //         console.log(\"wait...\");\n    //     //     } else {\n    //     //         if (ActiveUser.key.isSelfcheckout == true) {\n    //     //             // if(isMobileOnly == true){\n    //     //             //     navigate('/selfcheckout')\n    //     //             // }else{\n    //     //             //  navigate( '/selfcheckout');\n    //     //             //}\n\n    //     //         }\n    //     //         else {\n    //     //             // if(isMobileOnly == true){\n    //     //             //     navigate('/home')\n    //     //             // }else{\n    //     //             //     navigate( '/home');\n    //     //             // }\n    //     //         }\n    //     //     }\n    //     // })\n\n    //     //------------------------------------------\n\n\n    // }\n    const getProductList = (pn, pz, pl, trc) => {\n        if (trc != 0) {\n            var _perc = ((pl.length * 100) / trc).toFixed(0);\n            setLoadingProducts(\"Synched \" + pl.length + \" Products, Out of \" + trc + \"\");\n            setLoadPerc(_perc);\n            // this.setState({ loadingProducts: \"Synched \" + pl.length + \" Products, Out of \" + trc + \"\",loadPerc: _perc });          \n        }\n\n        var self = this;\n        if (!localStorage.getItem('user') || !sessionStorage.getItem(\"issuccess\")) {\n            //redirectToURL()\n            // navigate('/loginpin');\n        }\n        var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/home';\n\n        var udid = get_UDid(localStorage.getItem(\"UDID\"));\n        var reloadCount = localStorage.getItem(\"ReloadCount\") ? localStorage.getItem(\"ReloadCount\") : 0;\n        var WarehouseId = localStorage.getItem(\"WarehouseId\") ? parseInt(localStorage.getItem(\"WarehouseId\")) : 0;\n\n        var pageNumber = pn;\n        var pageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n        var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n        var ProductArray = pl;\n        var TotaltotalRecord = trc;\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                \"access-control-allow-origin\": \"*\",\n                \"access-control-allow-credentials\": \"true\",\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\")),\n            }\n            , mode: 'cors'\n        };\n        var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n        if (isDemoUser == true) {\n            requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid')\n        }\n        if (TotaltotalRecord == 0 && isDemoUser == false) {\n            // navigate( RedirectUrl) ;  \n            console.log(\"test4\")\n            UpdateIndexDB(udid, ProductArray, RedirectUrl);\n        }\n        // call firstTime------------------\n        //  call common service\n        //  serverRequest.clientServiceRequest('GET', `/ShopData/GetProductPageUpdatedWithCount?udid=${udid}&pageNumber=${pageNumber}&pageSize=${PageSize}`, '')\n        //dispatch(productLoader({ pageNumber, pageSize, WarehouseId }))\n        //console.log(\"resData\", resData)\n        fetch(`${Config.key.OP_API_URL}/v1/Product/Records?pageNumber=${pageNumber}&pageSize=${PageSize}&WarehouseId=${WarehouseId}`, requestOptions)\n            .then(response => {\n                if (response.ok) { return response.json(); }\n                throw new Error(response.statusText)  // throw an error if there's something wrong with the response\n            })\n            .then(function handleData(data) {\n                var reloadCount = localStorage.getItem(\"ReloadCount\");\n                ProductArray = [...new Set([...ProductArray, ...data.content.Records])];\n\n                //check dataExist into indexdb-------------------------\n                var isExist = false;\n\n                console.log(\"--------------Total Products count--------\" + TotaltotalRecord);\n\n                console.log(\"Test\", TotaltotalRecord, ProductArray.length)\n                if (isDemoUser == false && (TotaltotalRecord > ProductArray.length) && ((TotaltotalRecord != ProductArray.length) || pageNumber <= (TotaltotalRecord / PageSize * 1.0))) {\n                    console.log(\"--------------Product list request time--------\" + new Date());\n                    // self.UpdateIndexDB(udid,ProductArray);\n                    pageNumber++;\n                    //console.log(\"ProductArray1\",ProductArray.length)     \n                    console.log(\"test5\")\n                    getProductList(pageNumber, PageSize, ProductArray, TotaltotalRecord);\n                    console.log(\"test6\")\n                }\n                else {\n                    console.log(\"--------------all records are done-----------\");\n                    //console.log(\"ProductArray2\",ProductArray.length)                        \n\n                    UpdateIndexDB(udid, ProductArray, RedirectUrl);\n                    navigate('/home');\n\n                }\n            })\n            .catch(function handleError(error) {\n                console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\n                var reloadCount = localStorage.getItem(\"ReloadCount\");\n                // handle errors here\n                if (reloadCount < 3) {\n                    localStorage.setItem(\"ReloadCount\", (parseInt(reloadCount) + 1));\n                    setTimeout(function () {\n                        navigate('/'); //Reload to get product\n                        // navigate( '/home')\n                    }, 1000)\n                    navigate('/home')\n                }\n            })\n    }\n\n\n    //Getting the receipt and tax setting--------------------    \n    // const [resProductLoad] = useSelector((state) => [state.productloader])\n    // console.log(\"resProductLoad\", resProductLoad)\n\n    const [respReceiptSetting, respTaxSetting, resProlductCount] = useSelector((state) => [state.receiptsetting, state.taxsetting, state.productcount])\n    // console.log(\"respReceiptSetting\", respTaxSetting)\n\n    if (respReceiptSetting && respReceiptSetting.status == STATUSES.IDLE && respReceiptSetting.is_success) {\n        localStorage.setItem('orderreciept', JSON.stringify(respReceiptSetting.data.content))\n    }\n    if (respTaxSetting && respTaxSetting.status == STATUSES.IDLE && respTaxSetting.is_success) {\n        localStorage.setItem('TAX_SETTING', JSON.stringify(respTaxSetting.data.content))\n    }\n    if (resProlductCount && resProlductCount.status == STATUSES.IDLE && resProlductCount.is_success) {\n        localStorage.setItem('productcount', JSON.stringify(resProlductCount.data.content.count))\n\n    }\n    let useCancelled = false;\n    useEffect(() => {\n        if (useCancelled == false) {\n            fetchData()\n        }\n        return () => {\n            useCancelled = true;\n        }\n    }, []);\n\n\n\n    const fetchData = async () => { //calling multiple api\n        var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n        var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/home';\n        var udid = get_UDid(localStorage.getItem(\"UDID\"));\n        var pcount = localStorage.getItem('productcount');\n        if (isDemoUser == false) {\n            if (pcount == null || typeof (pcount) == 'undefined' || pcount == 0) {\n                //navigate(RedirectUrl);\n            }\n            UpdateIndexDB(udid, [], RedirectUrl);\n        }\n        //------------------------------------------------\n        localStorage.setItem(\"ProductLoad\", \"true\");\n        console.log(\"--------------Product list request First time--------\" + new Date());\n\n        getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\n        //------------------------------------------------- \n\n        dispatch(productCount(udid));\n        dispatch(receiptSetting());\n        dispatch(taxSetting());\n\n\n    }\n\n\n    // if (respReceiptSetting && respReceiptSetting.is_success\n    //     && respTaxSetting && respTaxSetting.is_success\n    //     && resProlductCount && resProlductCount.is_success) {\n    //To Clear indexDB----------------------------\n\n\n    //}\n\n\n    // const createIndexDB=(udid, ProductArray, RedirectUrl)=>{\n    //     (async () => {\n    //         if (!('indexedDB' in window)) {\n    //             console.warn('IndexedDB not supported')\n    //             return\n    //           }\n\n    //           const dbName = 'POSdb'\n    //           const storeName = 'product_'+udid\n    //           const version = 1 //versions start at 1\n\n    //           //delete Database\n    //           await deleteDB(dbName)\n\n\n    //           const db = await openDB(dbName, version, {\n    //             upgrade(db, oldVersion, newVersion, transaction) {\n    //               const store = db.createObjectStore(storeName,{ autoIncrement: true })   //  \"id\"         \n    //             }\n    //           })\n    //           const tx = db.transaction(storeName, 'readwrite')\n    //           const store = await tx.objectStore(storeName)\n\n    //           const val = 'hey!'\n    //           const key = 'Hello again'\n    //           ProductArray.forEach(element => {\n    //              const value =  store.put(element)\n    //           });\n\n    //           await tx.done\n\n    //         })()\n    // }\n\n\n    //  this.getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\n    return <div>\n        <h1>Product Loading...</h1>\n        <h2> {loadingProducts} ( {loadPerc})% </h2>;\n        ;\n    </div>\n}\n\nexport default ProductLoader"],"mappings":"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"},"metadata":{},"sourceType":"module"}