{"ast":null,"code":"import _regeneratorRuntime from\"D:/OliverPOS/OliverPOS3.0/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/OliverPOS/OliverPOS3.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{openDB}from'idb';import{get_UDid}from'../components/common/localSettings';var fetchIndexDb=function fetchIndexDb(){var udid=get_UDid('UDID');var dbPromise=openDB('POSDB',1,function(upgradeDB){upgradeDB.createObjectStore(udid);});var idbKeyval={get:function get(key){return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var db;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return dbPromise;case 2:db=_context.sent;return _context.abrupt(\"return\",db.transaction(udid).objectStore(udid).get(key));case 4:case\"end\":return _context.stop();}}},_callee);}))();}};return idbKeyval;};export var FetchIndexDB={fetchIndexDb:fetchIndexDb};export default FetchIndexDB;// var udid = get_UDid('UDID');\n// const dbPromise = openDB('POSDB', 1, upgradeDB => {\n//     upgradeDB.createObjectStore(udid);\n// });\n// const idbKeyval = {\n//     async get(key) {\n//         const db = await dbPromise;\n//         return db.transaction(udid).objectStore(udid).get(key);\n//     },\n//     async set(key, val) {\n//         const db = await dbPromise;\n//         const tx = db.transaction(udid, 'readwrite');\n//         tx.objectStore(udid).put(val, key);\n//         return tx.complete;\n//     },\n//     async delete(key) {\n//         const db = await dbPromise;\n//         const tx = db.transaction(udid, 'readwrite');\n//         tx.objectStore(udid).delete(key);\n//         return tx.complete;\n//     },\n//     async clear() {\n//         const db = await dbPromise;\n//         const tx = db.transaction(udid, 'readwrite');\n//         tx.objectStore(udid).clear();\n//         return tx.complete;\n//     },\n//     async keys() {\n//         const db = await dbPromise;\n//         return db.transaction(udid).objectStore(udid).getAllKeys(key);\n//     },\n// };","map":{"version":3,"names":["openDB","get_UDid","fetchIndexDb","udid","dbPromise","upgradeDB","createObjectStore","idbKeyval","get","key","db","transaction","objectStore","FetchIndexDB"],"sources":["D:/OliverPOS/OliverPOS3.0/src/settings/FetchIndexDB.js"],"sourcesContent":["import { openDB } from 'idb';\r\nimport { get_UDid } from '../components/common/localSettings'\r\n\r\n\r\nconst fetchIndexDb = () => {\r\n    var udid = get_UDid('UDID');\r\n    const dbPromise = openDB('POSDB', 1, upgradeDB => {\r\n        upgradeDB.createObjectStore(udid);\r\n    });\r\n\r\n    const idbKeyval = {\r\n        async get(key) {\r\n            const db = await dbPromise;\r\n            return db.transaction(udid).objectStore(udid).get(key);\r\n        },\r\n    };\r\n    return idbKeyval;\r\n}\r\n\r\n\r\nexport const FetchIndexDB = {\r\n    fetchIndexDb\r\n}\r\n\r\nexport default FetchIndexDB;\r\n\r\n// var udid = get_UDid('UDID');\r\n// const dbPromise = openDB('POSDB', 1, upgradeDB => {\r\n//     upgradeDB.createObjectStore(udid);\r\n// });\r\n\r\n// const idbKeyval = {\r\n//     async get(key) {\r\n//         const db = await dbPromise;\r\n//         return db.transaction(udid).objectStore(udid).get(key);\r\n//     },\r\n//     async set(key, val) {\r\n//         const db = await dbPromise;\r\n//         const tx = db.transaction(udid, 'readwrite');\r\n//         tx.objectStore(udid).put(val, key);\r\n//         return tx.complete;\r\n//     },\r\n//     async delete(key) {\r\n//         const db = await dbPromise;\r\n//         const tx = db.transaction(udid, 'readwrite');\r\n//         tx.objectStore(udid).delete(key);\r\n//         return tx.complete;\r\n//     },\r\n//     async clear() {\r\n//         const db = await dbPromise;\r\n//         const tx = db.transaction(udid, 'readwrite');\r\n//         tx.objectStore(udid).clear();\r\n//         return tx.complete;\r\n//     },\r\n//     async keys() {\r\n//         const db = await dbPromise;\r\n//         return db.transaction(udid).objectStore(udid).getAllKeys(key);\r\n//     },\r\n// };"],"mappings":"8OAAA,OAASA,MAAT,KAAuB,KAAvB,CACA,OAASC,QAAT,KAAyB,oCAAzB,CAGA,GAAMC,aAAY,CAAG,QAAfA,aAAe,EAAM,CACvB,GAAIC,KAAI,CAAGF,QAAQ,CAAC,MAAD,CAAnB,CACA,GAAMG,UAAS,CAAGJ,MAAM,CAAC,OAAD,CAAU,CAAV,CAAa,SAAAK,SAAS,CAAI,CAC9CA,SAAS,CAACC,iBAAV,CAA4BH,IAA5B,EACH,CAFuB,CAAxB,CAIA,GAAMI,UAAS,CAAG,CACRC,GADQ,cACJC,GADI,CACC,oOACML,UADN,QACLM,EADK,+CAEJA,EAAE,CAACC,WAAH,CAAeR,IAAf,EAAqBS,WAArB,CAAiCT,IAAjC,EAAuCK,GAAvC,CAA2CC,GAA3C,CAFI,6DAGd,CAJa,CAAlB,CAMA,MAAOF,UAAP,CACH,CAbD,CAgBA,MAAO,IAAMM,aAAY,CAAG,CACxBX,YAAY,CAAZA,YADwB,CAArB,CAIP,cAAeW,aAAf,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}