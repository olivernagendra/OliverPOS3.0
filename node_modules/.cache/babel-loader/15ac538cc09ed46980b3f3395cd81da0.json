{"ast":null,"code":"var _jsxFileName = \"D:\\\\OliverPOS\\\\OliverPOS3.0\\\\src\\\\components\\\\pinPage\\\\Pin.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\"; // import { useDispatch, useSelector } from 'react-redux';\n\nimport { get_locName, get_regName } from '../common/localSettings';\nimport imgOpenReg from '../../images/svg/OpenSign.svg'; // import imgBackSpace from '../../images/svg/Backspace-BaseBlue.svg'\n// import {createPin, validatePin} from \"./pinSlice\"\n// import { useNavigate } from \"react-router-dom\";\n// import { get_UDid } from \"../common/localSettings\"; \n// import STATUSES from \"../../constants/apiStatus\";\n// import moment from 'moment';\n\nimport { useNavigate } from 'react-router-dom';\nimport PinPad from \"../PinPad\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Pin = () => {\n  _s();\n\n  //     const dispatch = useDispatch();\n  const navigate = useNavigate(); //     const [totalSize,setTotalSize]=useState(0)\n  //     const [txtValue,setTxtValue]=useState(\"\")\n  //     const [isloading,setIsloading]=useState(false)\n  //     const { status, data, error, is_success } = useSelector((state) => state.pin)\n  //     var hasPin = localStorage.getItem('hasPin')\n  //     if (status === STATUSES.error) {\n  //         console.log(error)\n  //     }\n  //     if (status === STATUSES.IDLE && is_success) {       \n  //        localStorage.setItem('user', JSON.stringify(data.content));\n  //        if (typeof (Storage) !== \"undefined\") {\n  //            localStorage.setItem(\"check_subscription_status_datetime\", new Date());\n  //        }\n  //         if (localStorage.getItem(\"PRODUCT_REFRESH_DATE\") == null) {\n  //             localStorage.setItem(\"PRODUCT_REFRESH_DATE\", moment.utc(new Date()).format('YYYY-MM-DD HH:mm:ss'))\n  //           }\n  //           var _lang = localStorage.getItem(\"LANG\");\n  //           var user = JSON.parse(localStorage.getItem(\"user\"))\n  //           var lang = user && user.language ? user.language : 'en';\n  //           localStorage.setItem(\"LANG\", lang);\n  //           //Reloading the component if new language set for the login user.                  \n  //           if (_lang && _lang !== lang) {\n  //            // window.location = '/';\n  //           }\n  //navigate('/productloader')\n  //  navigate('/home')\n  //     }\n  //     const  pinNumberList= [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \" \", \"0\", \"c\"];\n  //     const trshPin= ['txt1', 'txt2', 'txt3', 'txt4']\n  // const NumInput = props =>\n  //     chunkArray(props.numbers, 3).map((num, index) => (\n  //         <div key={index} className=\"pin-button-row\">\n  //             {num.map((nm, i) => {\n  //                 if(nm===\" \"){ return \"\"}\n  //                 return (\n  //                      <button key={\"input\" + i} type=\"button\" id={props.id} \n  //                      onClick={() => { addToScreen(nm) }} \n  //                      className={nm === 'c'?\"backspace\":\"\"}> \n  //                              {nm === 'c' ? <img src={imgBackSpace}/> : nm} \n  //                      </button>\n  //                 )        \n  //             })\n  //             }\n  //             </div>\n  //     ))\n  //     // display dot pin\n  // const TrashPin = () =>\n  //     trshPin.map((pinId, ind) => {\n  //        // console.log(\"totalSize\",totalSize)\n  //         return (\n  //             <div key = {ind} className={\"pin-entry \" +(totalSize >= ind+1 && \"entered\" )}></div>\n  //         )\n  //     })\n  // // show entered number for create pin\n  // const ShowCreatePin = props =>\n  //     trshPin.map((pinId, ind) => {\n  //         return (\n  //                   <input key ={ind} type=\"number\" id={pinId + 1} onChange={(e)=>handle(e)}  /> \n  //                 //   className={props.className}\n  //         )\n  //     })\n  //    const resetScreen=()=> {\n  //         var str =txtValue;\n  //         if (totalSize > 0) {\n  //             setTotalSize(totalSize-1);\n  //             setTxtValue(str.substring(0, str.length - 1));\n  //         } else {\n  //             setTotalSize(0);\n  //             setTxtValue(\"\");\n  //         }\n  //         fillPass();\n  //     }\n  //   const  addToScreen=(inputNo) =>{\n  //      if(inputNo === \" \") {return} \n  //         //var lenght_is = e.length - 1\n  //         //var newString = inputNo;//e[lenght_is];\n  //         if (inputNo === \"c\") {\n  //             if (totalSize > 0) {\n  //                resetScreen();\n  //             } else {\n  //                  setTotalSize(0);\n  //                 setTxtValue('');\n  //             }\n  //             return;\n  //         }\n  //         if (totalSize < 4) {\n  //             var value= txtValue+ inputNo\n  //             var size=totalSize+ 1\n  //             setTxtValue(value);\n  //             setTotalSize(size );\n  //             console.log(value, size)\n  //             setTimeout(() => {\n  //                 fillPass(value);\n  //             }, 100);\n  //         }\n  //         // $('#whichkey').focus()\n  //         var _envType = localStorage.getItem('env_type');\n  //         if (_envType && _envType !== \"\") {\n  //            // $('#whichkey').attr('readonly', true);\n  //         } else {\n  //             //$('#whichkey').focus();\n  //         }\n  //     }\n  //    const fillPass=(enteredPin)=> {\n  //                 if (enteredPin.length >= 4) {\n  //                     //const { dispatch } = this.props;\n  //                     if (isloading === false) {\n  //                         setIsloading(true)\n  //                         localStorage.removeItem('logoutclick'); //For webview            \n  //                         setTimeout(function () {    //Need delay for reaset text\n  //                             var userID = \"\";\n  //                             if (localStorage.getItem(\"userId\")) {\n  //                                 userID = localStorage.getItem(\"userId\");\n  //                             } else {\n  //                                 userID = localStorage.getItem('clientDetail') ? JSON.parse(localStorage.getItem('clientDetail')).user_id : \"\";\n  //                                 localStorage.setItem(\"userId\", userID)\n  //                             }\n  //                             if (enteredPin !== null && enteredPin !== '' && userID && userID !== '') {\n  //                                 console.log(typeof (enteredPin) ,enteredPin,txtValue,);\n  //                                 if (hasPin !== 'false') {\n  //                                    dispatch(validatePin({\"pin\":enteredPin,\"userid\": userID,\"UDID\":get_UDid('UDID')}));\n  //                                 } else {\n  //                                    dispatch(createPin({\"pin\":enteredPin, \"id\":userID}));\n  //                                 }\n  //                             }\n  //                             setTxtValue(\"\");\n  //                             setTotalSize (0);\n  //                         }, 100)\n  //                     }\n  //                 }\n  //     }\n  //    const handle=(e) =>{\n  //         const { value } = e.target;\n  //         const re = new RegExp('^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$')\n  //         if (value === '' || re.test(value)) {\n  //             addToScreen(value)\n  //         }\n  //     }\n  //    const handleBack=(e)=> {\n  //         if (e.keyCode == 76 && e.ctrlKey) {\n  //             this.log_out()\n  //         }\n  //         if (e.keyCode == 86 && e.ctrlKey) {\n  //             //$('#PinPagebackButton').focus();\n  //         }\n  //         var key = e.which || e.keyCode;\n  //         if (key === 8) {\n  //             this.addToScreen('c')\n  //             e.preventDefault();\n  //         }\n  //         if (key === 13) {\n  //             //event.preventDefault();\n  //         }\n  //     }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"idle-register-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: imgOpenReg,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"style1\",\n          children: get_locName()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"divider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"style2\",\n          children: get_regName()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"style3\",\n          children: get_locName()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"closeRegister1\",\n          children: \"Close Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(PinPad, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 16\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"closeRegister2\",\n        children: \"Close Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Pin, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Pin;\nexport default Pin;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pin\");","map":{"version":3,"names":["React","useState","get_locName","get_regName","imgOpenReg","useNavigate","PinPad","Pin","navigate"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/pinPage/Pin.js"],"sourcesContent":["import React, { useState } from \"react\"\r\n// import { useDispatch, useSelector } from 'react-redux';\r\nimport { get_locName, get_regName } from '../common/localSettings'\r\nimport imgOpenReg from '../../images/svg/OpenSign.svg'\r\n// import imgBackSpace from '../../images/svg/Backspace-BaseBlue.svg'\r\n\r\n// import {createPin, validatePin} from \"./pinSlice\"\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { get_UDid } from \"../common/localSettings\"; \r\n// import STATUSES from \"../../constants/apiStatus\";\r\n// import moment from 'moment';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport PinPad from \"../PinPad\";\r\n\r\nconst Pin = () => {\r\n    //     const dispatch = useDispatch();\r\n    const navigate = useNavigate();\r\n    //     const [totalSize,setTotalSize]=useState(0)\r\n    //     const [txtValue,setTxtValue]=useState(\"\")\r\n    //     const [isloading,setIsloading]=useState(false)\r\n    //     const { status, data, error, is_success } = useSelector((state) => state.pin)\r\n    //     var hasPin = localStorage.getItem('hasPin')\r\n    //     if (status === STATUSES.error) {\r\n    //         console.log(error)\r\n    //     }\r\n    //     if (status === STATUSES.IDLE && is_success) {       \r\n    //        localStorage.setItem('user', JSON.stringify(data.content));\r\n    //        if (typeof (Storage) !== \"undefined\") {\r\n    //            localStorage.setItem(\"check_subscription_status_datetime\", new Date());\r\n    //        }\r\n\r\n    //         if (localStorage.getItem(\"PRODUCT_REFRESH_DATE\") == null) {\r\n    //             localStorage.setItem(\"PRODUCT_REFRESH_DATE\", moment.utc(new Date()).format('YYYY-MM-DD HH:mm:ss'))\r\n    //           }\r\n\r\n    //           var _lang = localStorage.getItem(\"LANG\");\r\n\r\n    //           var user = JSON.parse(localStorage.getItem(\"user\"))\r\n    //           var lang = user && user.language ? user.language : 'en';\r\n    //           localStorage.setItem(\"LANG\", lang);\r\n\r\n    //           //Reloading the component if new language set for the login user.                  \r\n    //           if (_lang && _lang !== lang) {\r\n    //            // window.location = '/';\r\n    //           }\r\n\r\n    //navigate('/productloader')\r\n    //  navigate('/home')\r\n\r\n    //     }\r\n\r\n\r\n    //     const  pinNumberList= [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \" \", \"0\", \"c\"];\r\n    //     const trshPin= ['txt1', 'txt2', 'txt3', 'txt4']\r\n\r\n    // const NumInput = props =>\r\n    //     chunkArray(props.numbers, 3).map((num, index) => (\r\n    //         <div key={index} className=\"pin-button-row\">\r\n    //             {num.map((nm, i) => {\r\n    //                 if(nm===\" \"){ return \"\"}\r\n    //                 return (\r\n    //                      <button key={\"input\" + i} type=\"button\" id={props.id} \r\n    //                      onClick={() => { addToScreen(nm) }} \r\n    //                      className={nm === 'c'?\"backspace\":\"\"}> \r\n    //                              {nm === 'c' ? <img src={imgBackSpace}/> : nm} \r\n    //                      </button>\r\n    //                 )        \r\n\r\n    //             })\r\n\r\n    //             }\r\n    //             </div>\r\n    //     ))\r\n\r\n    //     // display dot pin\r\n    // const TrashPin = () =>\r\n    //     trshPin.map((pinId, ind) => {\r\n    //        // console.log(\"totalSize\",totalSize)\r\n    //         return (\r\n    //             <div key = {ind} className={\"pin-entry \" +(totalSize >= ind+1 && \"entered\" )}></div>\r\n\r\n    //         )\r\n    //     })\r\n    // // show entered number for create pin\r\n    // const ShowCreatePin = props =>\r\n    //     trshPin.map((pinId, ind) => {\r\n    //         return (\r\n    //                   <input key ={ind} type=\"number\" id={pinId + 1} onChange={(e)=>handle(e)}  /> \r\n    //                 //   className={props.className}\r\n    //         )\r\n    //     })\r\n    //    const resetScreen=()=> {\r\n    //         var str =txtValue;\r\n    //         if (totalSize > 0) {\r\n    //             setTotalSize(totalSize-1);\r\n    //             setTxtValue(str.substring(0, str.length - 1));\r\n    //         } else {\r\n    //             setTotalSize(0);\r\n    //             setTxtValue(\"\");\r\n    //         }\r\n    //         fillPass();\r\n    //     }\r\n    //   const  addToScreen=(inputNo) =>{\r\n    //      if(inputNo === \" \") {return} \r\n    //         //var lenght_is = e.length - 1\r\n    //         //var newString = inputNo;//e[lenght_is];\r\n    //         if (inputNo === \"c\") {\r\n    //             if (totalSize > 0) {\r\n    //                resetScreen();\r\n    //             } else {\r\n    //                  setTotalSize(0);\r\n    //                 setTxtValue('');\r\n    //             }\r\n    //             return;\r\n    //         }\r\n    //         if (totalSize < 4) {\r\n    //             var value= txtValue+ inputNo\r\n    //             var size=totalSize+ 1\r\n    //             setTxtValue(value);\r\n    //             setTotalSize(size );\r\n    //             console.log(value, size)\r\n    //             setTimeout(() => {\r\n    //                 fillPass(value);\r\n    //             }, 100);\r\n\r\n    //         }\r\n\r\n    //         // $('#whichkey').focus()\r\n    //         var _envType = localStorage.getItem('env_type');\r\n    //         if (_envType && _envType !== \"\") {\r\n    //            // $('#whichkey').attr('readonly', true);\r\n    //         } else {\r\n    //             //$('#whichkey').focus();\r\n    //         }\r\n    //     }\r\n    //    const fillPass=(enteredPin)=> {\r\n\r\n    //                 if (enteredPin.length >= 4) {\r\n    //                     //const { dispatch } = this.props;\r\n    //                     if (isloading === false) {\r\n    //                         setIsloading(true)\r\n    //                         localStorage.removeItem('logoutclick'); //For webview            \r\n    //                         setTimeout(function () {    //Need delay for reaset text\r\n    //                             var userID = \"\";\r\n\r\n    //                             if (localStorage.getItem(\"userId\")) {\r\n    //                                 userID = localStorage.getItem(\"userId\");\r\n    //                             } else {\r\n    //                                 userID = localStorage.getItem('clientDetail') ? JSON.parse(localStorage.getItem('clientDetail')).user_id : \"\";\r\n    //                                 localStorage.setItem(\"userId\", userID)\r\n    //                             }\r\n\r\n    //                             if (enteredPin !== null && enteredPin !== '' && userID && userID !== '') {\r\n\r\n\r\n    //                                 console.log(typeof (enteredPin) ,enteredPin,txtValue,);\r\n    //                                 if (hasPin !== 'false') {\r\n    //                                    dispatch(validatePin({\"pin\":enteredPin,\"userid\": userID,\"UDID\":get_UDid('UDID')}));\r\n    //                                 } else {\r\n    //                                    dispatch(createPin({\"pin\":enteredPin, \"id\":userID}));\r\n    //                                 }\r\n    //                             }\r\n\r\n    //                             setTxtValue(\"\");\r\n    //                             setTotalSize (0);\r\n    //                         }, 100)\r\n    //                     }\r\n    //                 }\r\n\r\n    //     }\r\n\r\n    //    const handle=(e) =>{\r\n    //         const { value } = e.target;\r\n    //         const re = new RegExp('^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$')\r\n    //         if (value === '' || re.test(value)) {\r\n    //             addToScreen(value)\r\n    //         }\r\n    //     }\r\n\r\n    //    const handleBack=(e)=> {\r\n    //         if (e.keyCode == 76 && e.ctrlKey) {\r\n    //             this.log_out()\r\n    //         }\r\n    //         if (e.keyCode == 86 && e.ctrlKey) {\r\n    //             //$('#PinPagebackButton').focus();\r\n    //         }\r\n    //         var key = e.which || e.keyCode;\r\n    //         if (key === 8) {\r\n    //             this.addToScreen('c')\r\n    //             e.preventDefault();\r\n    //         }\r\n    //         if (key === 13) {\r\n    //             //event.preventDefault();\r\n    //         }\r\n    //     }\r\n    return <div className=\"idle-register-wrapper\">\r\n        <header>\r\n            <img src={imgOpenReg} alt=\"\" />\r\n            <div className=\"col\">\r\n                <p className=\"style1\">{get_locName()}</p>\r\n                <div className=\"divider\"></div>\r\n                <p className=\"style2\">{get_regName()}</p>\r\n                <p className=\"style3\">{get_locName()}</p>\r\n                <button id=\"closeRegister1\">Close Register</button>\r\n            </div>\r\n        </header>\r\n        <main>{<PinPad></PinPad>} <button id=\"closeRegister2\">Close Register</button></main>\r\n    </div>\r\n}\r\n\r\nexport default Pin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,yBAAzC;AACA,OAAOC,UAAP,MAAuB,+BAAvB,C,CACA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EACd;EACA,MAAMC,QAAQ,GAAGH,WAAW,EAA5B,CAFc,CAGdoBAAO;IAAK,SAAS,EAAC,uBAAf;IAAA,wBACH;MAAA,wBACI;QAAK,GAAG,EAAED,UAAV;QAAsB,GAAG,EAAC;MAA1B;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAK,SAAS,EAAC,KAAf;QAAA,wBACI;UAAG,SAAS,EAAC,QAAb;UAAA,UAAuBF,WAAW;QAAlC;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAK,SAAS,EAAC;QAAf;UAAA;UAAA;UAAA;QAAA,QAFJ,eAGI;UAAG,SAAS,EAAC,QAAb;UAAA,UAAuBC,WAAW;QAAlC;UAAA;UAAA;UAAA;QAAA,QAHJ,eAII;UAAG,SAAS,EAAC,QAAb;UAAA,UAAuBD,WAAW;QAAlC;UAAA;UAAA;UAAA;QAAA,QAJJ,eAKI;UAAQ,EAAE,EAAC,gBAAX;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QALJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADG,eAWH;MAAA,wBAAO,QAAC,MAAD;QAAA;QAAA;QAAA;MAAA,QAAP,oBAA0B;QAAQ,EAAE,EAAC,gBAAX;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA1B;IAAA;MAAA;MAAA;MAAA;IAAA,QAXG;EAAA;IAAA;IAAA;IAAA;EAAA,QAAP;AAaH,CAlMD;;GAAMK,G;UAEeF,W;;;KAFfE,G;AAoMN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}