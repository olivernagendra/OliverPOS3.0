{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { cashRecordsAPI, getDetailsAPI } from './CashManagementAPI';\nimport STATUSES from '../../constants/apiStatus';\nconst initialState = {\n  \"status\": STATUSES.IDLE,\n  \"data\": \"\",\n  \"error\": '',\n  \"is_success\": false\n};\nexport const getDetails = createAsyncThunk('cashmanagement/getDetailsAPI', async (parameter, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  // const response =  getDetailsAPI(parameter);\n  // // The value we return becomes the `fulfilled` action payload\n  // console.log(\"test\",response.json())\n  // return response.json();\n  try {\n    const response = await getDetailsAPI(parameter); // The value we return becomes the `fulfilled` action payload\n\n    return response;\n  } catch (err) {\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\n    // by explicitly returning it using the `rejectWithValue()` utility\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const cashRecords = createAsyncThunk('cashmanagement/cashRecordsAPI', async (parameter, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  // const response =  cashRecordsAPI(parameter);\n  // // The value we return becomes the `fulfilled` action payload\n  // console.log(\"test\",response.json())\n  // return response.json();\n  try {\n    const response = await cashRecordsAPI(parameter); // The value we return becomes the `fulfilled` action payload\n\n    return response;\n  } catch (err) {\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\n    // by explicitly returning it using the `rejectWithValue()` utility\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const CashmanagementSlice = createSlice({\n  name: 'cashmanagement',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {// loginPanding:(state)=>{\n    //   state.status=STATUSES.LOADING;\n    //   state.data=\"\"\n    // },\n    // loginSuccess:(state,action)=>{\n    //   state.status=STATUSES.IDLE;\n    //   state.error='';\n    //   state.data=action.payload\n    // },\n    // loginFail:(state,action)=>{\n    //   state.status=STATUSES.ERROR;    \n    //   state.data=\"\";\n    //   state.error=action.payload;\n    // }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  // extraReducers: () => {}\n  extraReducers: builder => {\n    builder.addCase(cashRecords.pending, state => {\n      state.status = STATUSES.LOADING;\n      state.data = \"\";\n      state.error = \"\";\n      state.is_success = false;\n    }).addCase(cashRecords.fulfilled, (state, action) => {\n      state.status = action.payload && action.payload.is_success == true ? STATUSES.IDLE : STATUSES.ERROR;\n      state.data = action.payload && action.payload.is_success == true ? action.payload : \"\";\n      state.error = action.payload && action.payload.is_success == false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";\n      ;\n      state.is_success = action.payload && action.payload.is_success == true ? true : false;\n    }).addCase(cashRecords.rejected, (state, action) => {\n      state.status = STATUSES.IDLE;\n      state.data = \"\";\n      state.error = action.error;\n      state.is_success = false;\n    }).addCase(getDetails.pending, state => {\n      state.status = STATUSES.LOADING;\n      state.data = \"\";\n      state.error = \"\";\n      state.is_success = false;\n    }).addCase(getDetails.fulfilled, (state, action) => {\n      state.status = action.payload && action.payload.is_success == true ? STATUSES.IDLE : STATUSES.ERROR;\n      state.data = action.payload && action.payload.is_success == true ? action.payload : \"\";\n      state.error = action.payload && action.payload.is_success == false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";\n      ;\n      state.is_success = action.payload && action.payload.is_success == true ? true : false;\n    }).addCase(getDetails.rejected, (state, action) => {\n      state.status = STATUSES.IDLE;\n      state.data = \"\";\n      state.error = action.error;\n      state.is_success = false;\n    });\n  }\n});\nexport const {\n  loginPanding,\n  loginSuccess,\n  loginFail\n} = CashmanagementSlice.actions; // // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state: RootState) => state.login.value)`\n// export const selectCount = (state) => state.login.value;\n// // We can also write thunks by hand, which may contain both sync and async logic.\n// // Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default CashmanagementSlice;","map":{"version":3,"names":["createAsyncThunk","createSlice","cashRecordsAPI","getDetailsAPI","STATUSES","initialState","IDLE","getDetails","parameter","rejectWithValue","response","err","data","cashRecords","CashmanagementSlice","name","reducers","extraReducers","builder","addCase","pending","state","status","LOADING","error","is_success","fulfilled","action","payload","ERROR","exceptions","rejected","loginPanding","loginSuccess","loginFail","actions"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/cashmanagement/CashmanagementSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { cashRecordsAPI ,getDetailsAPI } from './CashManagementAPI'\r\nimport STATUSES from '../../constants/apiStatus';\r\n\r\n\r\nconst initialState = {\r\n  \"status\": STATUSES.IDLE,\r\n  \"data\": \"\", \r\n  \"error\":'',\r\n  \"is_success\":false\r\n};\r\n\r\nexport const getDetails = createAsyncThunk(\r\n    'cashmanagement/getDetailsAPI',\r\n    async (parameter,{rejectWithValue}) => {   \r\n      // const response =  getDetailsAPI(parameter);\r\n      // // The value we return becomes the `fulfilled` action payload\r\n      // console.log(\"test\",response.json())\r\n      // return response.json();\r\n  \r\n     try {\r\n       const response = await getDetailsAPI(parameter);\r\n            // The value we return becomes the `fulfilled` action payload\r\n            return response;\r\n     } catch (err) {\r\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n      // by explicitly returning it using the `rejectWithValue()` utility\r\n      return rejectWithValue(err.response.data)\r\n    }\r\n           \r\n    }\r\n  );\r\n\r\n  export const cashRecords = createAsyncThunk(\r\n    'cashmanagement/cashRecordsAPI',\r\n    async (parameter,{rejectWithValue}) => {   \r\n      // const response =  cashRecordsAPI(parameter);\r\n      // // The value we return becomes the `fulfilled` action payload\r\n      // console.log(\"test\",response.json())\r\n      // return response.json();\r\n  \r\n     try {\r\n       const response = await cashRecordsAPI(parameter);\r\n            // The value we return becomes the `fulfilled` action payload\r\n            return response;\r\n     } catch (err) {\r\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n      // by explicitly returning it using the `rejectWithValue()` utility\r\n      return rejectWithValue(err.response.data)\r\n    }\r\n           \r\n    }\r\n  );\r\n\r\n\r\n\r\nexport const CashmanagementSlice = createSlice({\r\n    name: 'cashmanagement',\r\n    initialState,\r\n    // The `reducers` field lets us define reducers and generate associated actions\r\n    reducers: { \r\n      // loginPanding:(state)=>{\r\n      //   state.status=STATUSES.LOADING;\r\n      //   state.data=\"\"\r\n      // },\r\n      // loginSuccess:(state,action)=>{\r\n      //   state.status=STATUSES.IDLE;\r\n      //   state.error='';\r\n      //   state.data=action.payload\r\n      // },\r\n      // loginFail:(state,action)=>{\r\n      //   state.status=STATUSES.ERROR;    \r\n      //   state.data=\"\";\r\n      //   state.error=action.payload;\r\n      // }\r\n    },\r\n    // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n    // including actions generated by createAsyncThunk or in other slices.\r\n   // extraReducers: () => {}\r\n    extraReducers: (builder) => {    \r\n      builder     \r\n        .addCase(cashRecords.pending, (state) => {\r\n          state.status = STATUSES.LOADING;\r\n          state.data=\"\";\r\n          state.error=\"\";\r\n          state.is_success=false;\r\n        })\r\n        .addCase(cashRecords.fulfilled, (state, action) => {       \r\n            state.status = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.ERROR;\r\n            state.data=(action.payload && action.payload.is_success==true ?action.payload:\"\");  \r\n            state.error=action.payload && action.payload.is_success==false? action.payload.exceptions[0]: action.payload?\"Fail to fetch\":\"\";;\r\n            state.is_success=action.payload && action.payload.is_success==true? true: false;      \r\n        })\r\n        .addCase(cashRecords.rejected, (state,action) => {\r\n          state.status = STATUSES.IDLE;\r\n          state.data=\"\";\r\n          state.error = action.error;\r\n          state.is_success=false;\r\n        })\r\n        .addCase(getDetails.pending, (state) => {\r\n          state.status = STATUSES.LOADING;\r\n          state.data=\"\";\r\n          state.error=\"\";\r\n          state.is_success=false;\r\n        })\r\n        .addCase(getDetails.fulfilled, (state, action) => {       \r\n            state.status = action.payload && action.payload.is_success==true? STATUSES.IDLE: STATUSES.ERROR;\r\n            state.data=(action.payload && action.payload.is_success==true ?action.payload:\"\");  \r\n            state.error=action.payload && action.payload.is_success==false? action.payload.exceptions[0]: action.payload?\"Fail to fetch\":\"\";;\r\n            state.is_success=action.payload && action.payload.is_success==true? true: false;      \r\n        })\r\n        .addCase(getDetails.rejected, (state,action) => {\r\n          state.status = STATUSES.IDLE;\r\n          state.data=\"\";\r\n          state.error = action.error;\r\n          state.is_success=false;\r\n        })\r\n    },\r\n  });\r\n  \r\n  \r\n  \r\n  \r\n   export const { loginPanding, loginSuccess, loginFail } = CashmanagementSlice.actions;\r\n  \r\n  \r\n  // // The function below is called a selector and allows us to select a value from\r\n  // // the state. Selectors can also be defined inline where they're used instead of\r\n  // // in the slice file. For example: `useSelector((state: RootState) => state.login.value)`\r\n  // export const selectCount = (state) => state.login.value;\r\n  \r\n  // // We can also write thunks by hand, which may contain both sync and async logic.\r\n  // // Here's an example of conditionally dispatching actions based on current state.\r\n  // export const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n  //   const currentValue = selectCount(getState());\r\n  //   if (currentValue % 2 === 1) {\r\n  //     dispatch(incrementByAmount(amount));\r\n  //   }\r\n  // };\r\n  \r\n  export default CashmanagementSlice;"],"mappings":"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"},"metadata":{},"sourceType":"module"}