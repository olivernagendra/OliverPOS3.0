{"ast":null,"code":"var _jsxFileName = \"D:\\\\OliverPOS\\\\OliverPOS3.0\\\\src\\\\components\\\\loadProduct\\\\ProductLoader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteDB, openDB } from 'idb';\nimport { get_UDid } from '../common/localSettings';\nimport Config from '../../Config';\nimport { receiptSetting } from '../serverSetting/receiptSettingSlice';\nimport ActiveUser from '../../settings/ActiveUser';\nimport { taxSetting } from '../serverSetting/taxSettingSlice';\nimport STATUSES from '../../constants/apiStatus';\nimport { productCount } from './productCountSlice';\nimport { productLoader } from './loadProductSlice';\nimport { useNavigate } from 'react-router-dom'; //import LoaderOnboarding from '../onboarding/components/LoaderOnboarding'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductLoader = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [loadingProducts, setLoadingProducts] = useState(0);\n  const [loadPerc, setLoadPerc] = useState(0);\n\n  const UpdateIndexDB = (udid, ProductArray, RedirectUrl) => {\n    var TotaltotalRecord = localStorage.getItem('productcount');\n    var _perc = 0;\n\n    if (ProductArray && ProductArray.length > 0 && TotaltotalRecord && TotaltotalRecord > 0) {\n      _perc = (ProductArray.length * 100 / TotaltotalRecord).toFixed(0);\n    } // this.setState({ loadPerc: _perc });    \n    // const dbPromise = openDB(\"ProductDB\", 1, {\n    //     upgrade(db, oldVersion, newVersion, transaction) {\n    //         db.createObjectStore(udid);\n    //     },\n    //     blocked() {\n    //         // …\n    //     },\n    //     blocking() {\n    //         // …\n    //     },\n    //     terminated() {\n    //         // …\n    //     },\n    // });\n\n\n    const dbPromise = openDB('POSDB', 1, {\n      upgrade(db) {\n        db.createObjectStore(udid);\n      }\n\n    });\n    const idbKeyval = {\n      async get(key) {\n        const db = await dbPromise;\n        return db.transaction(udid).objectStore(udid).get(key);\n      },\n\n      async set(key, val) {\n        const db = await dbPromise;\n        const tx = db.transaction(udid, 'readwrite');\n        tx.objectStore(udid).put(val, key);\n        return tx.complete;\n      }\n\n    }; // for unique array----------------------\n\n    const arrayUniqueByKey = [...new Map(ProductArray.map(item => [item['WPID'], item])).values()];\n    idbKeyval.set('ProductList', arrayUniqueByKey);\n    idbKeyval.get('ProductList').then(val => {\n      if (ProductArray.length == 0 || !val || val.length == 0 || val == null || val == \"\") {\n        console.log(\"wait...\");\n      } else {\n        if (ActiveUser.key.isSelfcheckout == true) {// if(isMobileOnly == true){\n          //     navigate('/selfcheckout')\n          // }else{\n          //  navigate( '/selfcheckout');\n          //}\n        } else {// if(isMobileOnly == true){\n          //     navigate('/home')\n          // }else{\n          //     navigate( '/home');\n          // }\n        }\n      }\n    }); //------------------------------------------\n  };\n\n  const getProductList = (pn, pz, pl, trc) => {\n    if (trc != 0) {\n      var _perc = (pl.length * 100 / trc).toFixed(0);\n\n      setLoadingProducts(\"Synched \" + pl.length + \" Products, Out of \" + trc + \"\");\n      setLoadPerc(_perc); // this.setState({ loadingProducts: \"Synched \" + pl.length + \" Products, Out of \" + trc + \"\",loadPerc: _perc });          \n    }\n\n    var self = this;\n\n    if (!localStorage.getItem('user') || !sessionStorage.getItem(\"issuccess\")) {//redirectToURL()\n      // navigate('/loginpin');\n    }\n\n    var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/dashboard';\n    var udid = get_UDid(localStorage.getItem(\"UDID\"));\n    var reloadCount = localStorage.getItem(\"ReloadCount\") ? localStorage.getItem(\"ReloadCount\") : 0;\n    var WarehouseId = localStorage.getItem(\"WarehouseId\") ? parseInt(localStorage.getItem(\"WarehouseId\")) : 0;\n    var pageNumber = pn;\n    var pageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n    var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n    var ProductArray = pl;\n    var TotaltotalRecord = trc;\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        \"access-control-allow-origin\": \"*\",\n        \"access-control-allow-credentials\": \"true\",\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\"))\n      },\n      mode: 'cors'\n    };\n    var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n\n    if (isDemoUser == true) {\n      requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid');\n    }\n\n    if (TotaltotalRecord == 0 && isDemoUser == false) {\n      // navigate( RedirectUrl) ;  \n      UpdateIndexDB(udid, ProductArray, RedirectUrl);\n    } // call firstTime------------------\n    //  call common service\n    //  serverRequest.clientServiceRequest('GET', `/ShopData/GetProductPageUpdatedWithCount?udid=${udid}&pageNumber=${pageNumber}&pageSize=${PageSize}`, '')\n    //dispatch(productLoader({ pageNumber, pageSize, WarehouseId }))\n    //console.log(\"resData\", resData)\n\n\n    fetch(`${Config.key.OP_API_URL}/v1/Product/Records?pageNumber=${pageNumber}&pageSize=${PageSize}&WarehouseId=${WarehouseId}`, requestOptions).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(response.statusText); // throw an error if there's something wrong with the response\n    }).then(function handleData(data) {\n      var reloadCount = localStorage.getItem(\"ReloadCount\");\n      ProductArray = [...new Set([...ProductArray, ...data.content.Records])]; //check dataExist into indexdb-------------------------\n\n      var isExist = false;\n      console.log(\"--------------Total Products count--------\" + TotaltotalRecord);\n      console.log(\"Test\", TotaltotalRecord, ProductArray.length);\n\n      if (isDemoUser == false && TotaltotalRecord > ProductArray.length && (TotaltotalRecord != ProductArray.length || pageNumber <= TotaltotalRecord / PageSize * 1.0)) {\n        console.log(\"--------------Product list request time--------\" + new Date()); // self.UpdateIndexDB(udid,ProductArray);\n\n        pageNumber++; //console.log(\"ProductArray1\",ProductArray.length)                   \n\n        getProductList(pageNumber, PageSize, ProductArray, TotaltotalRecord);\n      } else {\n        console.log(\"--------------all records are done-----------\"); //console.log(\"ProductArray2\",ProductArray.length)                        \n\n        UpdateIndexDB(udid, ProductArray, RedirectUrl);\n        navigate('/dashboard');\n      }\n    }).catch(function handleError(error) {\n      console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\n      var reloadCount = localStorage.getItem(\"ReloadCount\"); // handle errors here\n\n      if (reloadCount < 3) {\n        localStorage.setItem(\"ReloadCount\", parseInt(reloadCount) + 1);\n        setTimeout(function () {\n          navigate('/'); //Reload to get product\n          // navigate( '/home')\n        }, 1000);\n        navigate('/dashboard');\n      }\n    });\n  };\n\n  const UpdateCustomerInIndexDB = (udid, ProductArray) => {\n    const dbPromise = openDB('POSDB', 1, {\n      upgrade(db) {\n        db.createObjectStore(udid);\n      }\n\n    });\n    const idbKeyval = {\n      async get(key) {\n        const db = await dbPromise;\n        return db.transaction(udid).objectStore(udid).get(key);\n      },\n\n      async set(key, val) {\n        const db = await dbPromise;\n        const tx = db.transaction(udid, 'readwrite');\n        tx.objectStore(udid).put(val, key);\n        return tx.complete;\n      }\n\n    }; // for unique array----------------------\n\n    const arrayUniqueByKey = [...new Map(ProductArray.map(item => [item['WPId'], item])).values()];\n    idbKeyval.set('CustomerList', arrayUniqueByKey); //------------------------------------------\n  };\n\n  const getCustomerList = (pn, pl, trc) => {\n    var udid = get_UDid(localStorage.getItem(\"UDID\"));\n    var pageNumber = pn;\n    var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n    var CustomerArray = pl;\n    var TotalRecord = trc;\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        \"access-control-allow-origin\": \"*\",\n        \"access-control-allow-credentials\": \"true\",\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\"))\n      },\n      mode: 'cors'\n    };\n    var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n\n    if (isDemoUser == true) {\n      requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid');\n    }\n\n    if (TotalRecord == 0) {\n      UpdateCustomerInIndexDB(udid, CustomerArray);\n    } // call firstTime------------------\n    //  call common service\n\n\n    fetch(`${Config.key.OP_API_URL}/v1/customers/GetPage?pageSize=${PageSize}&pageNumber=${pageNumber}`, requestOptions).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(response.statusText); // throw an error if there's something wrong with the response\n    }).then(function handleData(data) {\n      TotalRecord = data.content.Records.length;\n      CustomerArray = [...new Set([...CustomerArray, ...data.content.Records])]; //check dataExist into indexdb-------------------------\n\n      if (isDemoUser == false && TotalRecord >= PageSize) {\n        pageNumber++;\n        getCustomerList(pageNumber, CustomerArray, TotalRecord);\n      } else {\n        console.log(\"--------------all customer records are done-----------\" + CustomerArray.length);\n        UpdateCustomerInIndexDB(udid, CustomerArray);\n      }\n    }).catch(function handleError(error) {\n      console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\n    });\n  }; //Getting the receipt and tax setting--------------------    \n  // const [resProductLoad] = useSelector((state) => [state.productloader])\n  // console.log(\"resProductLoad\", resProductLoad)\n\n\n  const [respReceiptSetting, respTaxSetting, resProlductCount] = useSelector(state => [state.receiptsetting, state.taxsetting, state.productcount]); // console.log(\"respReceiptSetting\", respTaxSetting)\n\n  if (respReceiptSetting && respReceiptSetting.status == STATUSES.IDLE && respReceiptSetting.is_success) {\n    localStorage.setItem('orderreciept', JSON.stringify(respReceiptSetting.data.content));\n  }\n\n  if (respTaxSetting && respTaxSetting.status == STATUSES.IDLE && respTaxSetting.is_success) {\n    localStorage.setItem('TAX_SETTING', JSON.stringify(respTaxSetting.data.content));\n  }\n\n  if (resProlductCount && resProlductCount.status == STATUSES.IDLE && resProlductCount.is_success) {\n    localStorage.setItem('productcount', JSON.stringify(resProlductCount.data.content.count));\n  }\n\n  let useCancelled = false;\n  useEffect(() => {\n    if (useCancelled == false) {\n      fetchData();\n    }\n\n    return () => {\n      useCancelled = true;\n    };\n  }, []);\n\n  const fetchData = async () => {\n    //calling multiple api\n    var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n    var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/dashboard';\n    var udid = get_UDid(localStorage.getItem(\"UDID\"));\n    var pcount = localStorage.getItem('productcount');\n\n    if (isDemoUser == false) {\n      if (pcount == null || typeof pcount == 'undefined' || pcount == 0) {//navigate(RedirectUrl);\n      }\n\n      UpdateIndexDB(udid, [], RedirectUrl);\n    }\n\n    dispatch(productCount(udid));\n    dispatch(receiptSetting());\n    dispatch(taxSetting()); //------------------------------------------------\n\n    localStorage.setItem(\"ProductLoad\", \"true\");\n    console.log(\"--------------Product list request First time--------\" + new Date());\n    getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\n    getCustomerList(1, [], 0); //------------------------------------------------- \n  }; // if (respReceiptSetting && respReceiptSetting.is_success\n  //     && respTaxSetting && respTaxSetting.is_success\n  //     && resProlductCount && resProlductCount.is_success) {\n  //To Clear indexDB----------------------------\n  //}\n  // const createIndexDB=(udid, ProductArray, RedirectUrl)=>{\n  //     (async () => {\n  //         if (!('indexedDB' in window)) {\n  //             console.warn('IndexedDB not supported')\n  //             return\n  //           }\n  //           const dbName = 'POSdb'\n  //           const storeName = 'product_'+udid\n  //           const version = 1 //versions start at 1\n  //           //delete Database\n  //           await deleteDB(dbName)\n  //           const db = await openDB(dbName, version, {\n  //             upgrade(db, oldVersion, newVersion, transaction) {\n  //               const store = db.createObjectStore(storeName,{ autoIncrement: true })   //  \"id\"         \n  //             }\n  //           })\n  //           const tx = db.transaction(storeName, 'readwrite')\n  //           const store = await tx.objectStore(storeName)\n  //           const val = 'hey!'\n  //           const key = 'Hello again'\n  //           ProductArray.forEach(element => {\n  //              const value =  store.put(element)\n  //           });\n  //           await tx.done\n  //         })()\n  // }\n  //  this.getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Product Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", loadingProducts, \" ( \", loadPerc, \")% \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }, this), \"; ;\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProductLoader, \"ZLRzEi0BqeN/nOlwRA/bhFvyoZw=\", false, function () {\n  return [useNavigate, useDispatch, useSelector];\n});\n\n_c = ProductLoader;\nexport default ProductLoader;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductLoader\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","deleteDB","openDB","get_UDid","Config","receiptSetting","ActiveUser","taxSetting","STATUSES","productCount","productLoader","useNavigate","ProductLoader","navigate","dispatch","loadingProducts","setLoadingProducts","loadPerc","setLoadPerc","UpdateIndexDB","udid","ProductArray","RedirectUrl","TotaltotalRecord","localStorage","getItem","_perc","length","toFixed","dbPromise","upgrade","db","createObjectStore","idbKeyval","get","key","transaction","objectStore","set","val","tx","put","complete","arrayUniqueByKey","Map","map","item","values","then","console","log","isSelfcheckout","getProductList","pn","pz","pl","trc","self","sessionStorage","reloadCount","WarehouseId","parseInt","pageNumber","pageSize","FETCH_PRODUCTS_PAGESIZE","PageSize","requestOptions","method","headers","btoa","mode","isDemoUser","fetch","OP_API_URL","response","ok","json","Error","statusText","handleData","data","Set","content","Records","isExist","Date","catch","handleError","error","JSON","stringify","setItem","setTimeout","UpdateCustomerInIndexDB","getCustomerList","CustomerArray","TotalRecord","respReceiptSetting","respTaxSetting","resProlductCount","state","receiptsetting","taxsetting","productcount","status","IDLE","is_success","count","useCancelled","fetchData","pcount"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/loadProduct/ProductLoader.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteDB, openDB } from 'idb';\r\n\r\nimport { get_UDid } from '../common/localSettings'\r\nimport Config from '../../Config';\r\nimport { receiptSetting } from '../serverSetting/receiptSettingSlice';\r\nimport ActiveUser from '../../settings/ActiveUser';\r\nimport { taxSetting } from '../serverSetting/taxSettingSlice';\r\nimport STATUSES from '../../constants/apiStatus';\r\nimport { productCount } from './productCountSlice';\r\nimport { productLoader } from './loadProductSlice';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n//import LoaderOnboarding from '../onboarding/components/LoaderOnboarding'\r\nconst ProductLoader = () => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch()\r\n    const [loadingProducts, setLoadingProducts] = useState(0)\r\n    const [loadPerc, setLoadPerc] = useState(0)\r\n\r\n\r\n    const UpdateIndexDB = (udid, ProductArray, RedirectUrl) => {\r\n        var TotaltotalRecord = localStorage.getItem('productcount');\r\n        var _perc = 0;\r\n        if (ProductArray && ProductArray.length > 0 && TotaltotalRecord && TotaltotalRecord > 0) {\r\n            _perc = ((ProductArray.length * 100) / TotaltotalRecord).toFixed(0);\r\n        }\r\n        // this.setState({ loadPerc: _perc });    \r\n        // const dbPromise = openDB(\"ProductDB\", 1, {\r\n        //     upgrade(db, oldVersion, newVersion, transaction) {\r\n        //         db.createObjectStore(udid);\r\n        //     },\r\n        //     blocked() {\r\n        //         // …\r\n        //     },\r\n        //     blocking() {\r\n        //         // …\r\n        //     },\r\n        //     terminated() {\r\n        //         // …\r\n        //     },\r\n        // });\r\n        const dbPromise = openDB('POSDB', 1, {\r\n            upgrade(db) {\r\n                db.createObjectStore(udid);\r\n            },\r\n        });\r\n\r\n\r\n        const idbKeyval = {\r\n            async get(key) {\r\n                const db = await dbPromise;\r\n                return db.transaction(udid).objectStore(udid).get(key);\r\n            },\r\n            async set(key, val) {\r\n                const db = await dbPromise;\r\n                const tx = db.transaction(udid, 'readwrite');\r\n                tx.objectStore(udid).put(val, key);\r\n                return tx.complete;\r\n            },\r\n        };\r\n        // for unique array----------------------\r\n        const arrayUniqueByKey = [...new Map(ProductArray.map(item =>\r\n            [item['WPID'], item])).values()];\r\n        idbKeyval.set('ProductList', arrayUniqueByKey);\r\n\r\n        idbKeyval.get('ProductList').then(val => {\r\n            if (ProductArray.length == 0 || !val || val.length == 0 || val == null || val == \"\") {\r\n                console.log(\"wait...\");\r\n            } else {\r\n                if (ActiveUser.key.isSelfcheckout == true) {\r\n                    // if(isMobileOnly == true){\r\n                    //     navigate('/selfcheckout')\r\n                    // }else{\r\n                    //  navigate( '/selfcheckout');\r\n                    //}\r\n\r\n                }\r\n                else {\r\n                    // if(isMobileOnly == true){\r\n                    //     navigate('/home')\r\n                    // }else{\r\n                    //     navigate( '/home');\r\n                    // }\r\n                }\r\n            }\r\n        })\r\n\r\n        //------------------------------------------\r\n\r\n\r\n    }\r\n    const getProductList = (pn, pz, pl, trc) => {\r\n        if (trc != 0) {\r\n            var _perc = ((pl.length * 100) / trc).toFixed(0);\r\n            setLoadingProducts(\"Synched \" + pl.length + \" Products, Out of \" + trc + \"\");\r\n            setLoadPerc(_perc);\r\n            // this.setState({ loadingProducts: \"Synched \" + pl.length + \" Products, Out of \" + trc + \"\",loadPerc: _perc });          \r\n        }\r\n\r\n        var self = this;\r\n        if (!localStorage.getItem('user') || !sessionStorage.getItem(\"issuccess\")) {\r\n            //redirectToURL()\r\n            // navigate('/loginpin');\r\n        }\r\n        var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/dashboard';\r\n\r\n        var udid = get_UDid(localStorage.getItem(\"UDID\"));\r\n        var reloadCount = localStorage.getItem(\"ReloadCount\") ? localStorage.getItem(\"ReloadCount\") : 0;\r\n        var WarehouseId = localStorage.getItem(\"WarehouseId\") ? parseInt(localStorage.getItem(\"WarehouseId\")) : 0;\r\n\r\n        var pageNumber = pn;\r\n        var pageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\r\n        var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\r\n        var ProductArray = pl;\r\n        var TotaltotalRecord = trc;\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                \"access-control-allow-origin\": \"*\",\r\n                \"access-control-allow-credentials\": \"true\",\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\")),\r\n            }\r\n            , mode: 'cors'\r\n        };\r\n        var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\r\n        if (isDemoUser == true) {\r\n            requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid')\r\n        }\r\n        if (TotaltotalRecord == 0 && isDemoUser == false) {\r\n            // navigate( RedirectUrl) ;  \r\n            UpdateIndexDB(udid, ProductArray, RedirectUrl);\r\n        }\r\n        // call firstTime------------------\r\n        //  call common service\r\n        //  serverRequest.clientServiceRequest('GET', `/ShopData/GetProductPageUpdatedWithCount?udid=${udid}&pageNumber=${pageNumber}&pageSize=${PageSize}`, '')\r\n        //dispatch(productLoader({ pageNumber, pageSize, WarehouseId }))\r\n        //console.log(\"resData\", resData)\r\n        fetch(`${Config.key.OP_API_URL}/v1/Product/Records?pageNumber=${pageNumber}&pageSize=${PageSize}&WarehouseId=${WarehouseId}`, requestOptions)\r\n            .then(response => {\r\n                if (response.ok) { return response.json(); }\r\n                throw new Error(response.statusText)  // throw an error if there's something wrong with the response\r\n            })\r\n            .then(function handleData(data) {\r\n                var reloadCount = localStorage.getItem(\"ReloadCount\");\r\n                ProductArray = [...new Set([...ProductArray, ...data.content.Records])];\r\n\r\n                //check dataExist into indexdb-------------------------\r\n                var isExist = false;\r\n\r\n                console.log(\"--------------Total Products count--------\" + TotaltotalRecord);\r\n\r\n                console.log(\"Test\", TotaltotalRecord, ProductArray.length)\r\n                if (isDemoUser == false && (TotaltotalRecord > ProductArray.length) && ((TotaltotalRecord != ProductArray.length) || pageNumber <= (TotaltotalRecord / PageSize * 1.0))) {\r\n                    console.log(\"--------------Product list request time--------\" + new Date());\r\n                    // self.UpdateIndexDB(udid,ProductArray);\r\n                    pageNumber++;\r\n                    //console.log(\"ProductArray1\",ProductArray.length)                   \r\n                    getProductList(pageNumber, PageSize, ProductArray, TotaltotalRecord);\r\n                }\r\n                else {\r\n                    console.log(\"--------------all records are done-----------\");\r\n                    //console.log(\"ProductArray2\",ProductArray.length)                        \r\n\r\n                    UpdateIndexDB(udid, ProductArray, RedirectUrl);\r\n                    navigate('/dashboard');\r\n\r\n                }\r\n            })\r\n            .catch(function handleError(error) {\r\n                console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\r\n                var reloadCount = localStorage.getItem(\"ReloadCount\");\r\n                // handle errors here\r\n                if (reloadCount < 3) {\r\n                    localStorage.setItem(\"ReloadCount\", (parseInt(reloadCount) + 1));\r\n                    setTimeout(function () {\r\n                        navigate('/'); //Reload to get product\r\n                        // navigate( '/home')\r\n                    }, 1000)\r\n                    navigate('/dashboard')\r\n                }\r\n            })\r\n    }\r\n    const UpdateCustomerInIndexDB = (udid, ProductArray) => {\r\n        \r\n        const dbPromise = openDB('POSDB', 1, {\r\n            upgrade(db) {\r\n                db.createObjectStore(udid);\r\n            },\r\n        });\r\n\r\n\r\n        const idbKeyval = {\r\n            async get(key) {\r\n                const db = await dbPromise;\r\n                return db.transaction(udid).objectStore(udid).get(key);\r\n            },\r\n            async set(key, val) {\r\n                const db = await dbPromise;\r\n                const tx = db.transaction(udid, 'readwrite');\r\n                tx.objectStore(udid).put(val, key);\r\n                return tx.complete;\r\n            },\r\n        };\r\n        // for unique array----------------------\r\n        const arrayUniqueByKey = [...new Map(ProductArray.map(item =>\r\n            [item['WPId'], item])).values()];\r\n        idbKeyval.set('CustomerList', arrayUniqueByKey);\r\n\r\n        \r\n        //------------------------------------------\r\n\r\n\r\n    }\r\n    const getCustomerList = (pn,  pl, trc) => {\r\n        var udid = get_UDid(localStorage.getItem(\"UDID\"));\r\n        var pageNumber = pn;\r\n        var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\r\n        var CustomerArray = pl;\r\n        var TotalRecord = trc;\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                \"access-control-allow-origin\": \"*\",\r\n                \"access-control-allow-credentials\": \"true\",\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\")),\r\n            }\r\n            , mode: 'cors'\r\n        };\r\n        var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\r\n        if (isDemoUser == true) {\r\n            requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid')\r\n        }\r\n        if (TotalRecord == 0 ) {\r\n            UpdateCustomerInIndexDB(udid, CustomerArray);\r\n        }\r\n        // call firstTime------------------\r\n        //  call common service\r\n        fetch(`${Config.key.OP_API_URL}/v1/customers/GetPage?pageSize=${PageSize}&pageNumber=${pageNumber}`, requestOptions)\r\n            .then(response => {\r\n                if (response.ok) { return response.json(); }\r\n                throw new Error(response.statusText)  // throw an error if there's something wrong with the response\r\n            })\r\n            .then(function handleData(data) {\r\n                TotalRecord = data.content.Records.length;\r\n                CustomerArray = [...new Set([...CustomerArray, ...data.content.Records])];\r\n                //check dataExist into indexdb-------------------------\r\n                if (isDemoUser == false && (TotalRecord >= PageSize) ) {\r\n                    pageNumber++;\r\n                    getCustomerList(pageNumber, CustomerArray, TotalRecord);\r\n                }\r\n                else {\r\n                    console.log(\"--------------all customer records are done-----------\"+CustomerArray.length);\r\n                    UpdateCustomerInIndexDB(udid, CustomerArray);\r\n\r\n                }\r\n            })\r\n            .catch(function handleError(error) {\r\n                console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\r\n            })\r\n    }\r\n\r\n\r\n    //Getting the receipt and tax setting--------------------    \r\n    // const [resProductLoad] = useSelector((state) => [state.productloader])\r\n    // console.log(\"resProductLoad\", resProductLoad)\r\n\r\n    const [respReceiptSetting, respTaxSetting, resProlductCount] = useSelector((state) => [state.receiptsetting, state.taxsetting, state.productcount])\r\n    // console.log(\"respReceiptSetting\", respTaxSetting)\r\n\r\n    if (respReceiptSetting && respReceiptSetting.status == STATUSES.IDLE && respReceiptSetting.is_success) {\r\n        localStorage.setItem('orderreciept', JSON.stringify(respReceiptSetting.data.content))\r\n    }\r\n    if (respTaxSetting && respTaxSetting.status == STATUSES.IDLE && respTaxSetting.is_success) {\r\n        localStorage.setItem('TAX_SETTING', JSON.stringify(respTaxSetting.data.content))\r\n    }\r\n    if (resProlductCount && resProlductCount.status == STATUSES.IDLE && resProlductCount.is_success) {\r\n        localStorage.setItem('productcount', JSON.stringify(resProlductCount.data.content.count))\r\n\r\n    }\r\n    let useCancelled = false;\r\n    useEffect(() => {\r\n        if (useCancelled == false) {\r\n            fetchData()\r\n        }\r\n        return () => {\r\n            useCancelled = true;\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    const fetchData = async () => { //calling multiple api\r\n        var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\r\n        var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/dashboard';\r\n        var udid = get_UDid(localStorage.getItem(\"UDID\"));\r\n        var pcount = localStorage.getItem('productcount');\r\n        if (isDemoUser == false) {\r\n            if (pcount == null || typeof (pcount) == 'undefined' || pcount == 0) {\r\n                //navigate(RedirectUrl);\r\n            }\r\n            UpdateIndexDB(udid, [], RedirectUrl);\r\n        }\r\n\r\n\r\n        dispatch(productCount(udid));\r\n        dispatch(receiptSetting());\r\n        dispatch(taxSetting());\r\n\r\n        //------------------------------------------------\r\n        localStorage.setItem(\"ProductLoad\", \"true\");\r\n        console.log(\"--------------Product list request First time--------\" + new Date());\r\n\r\n        getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\r\n        getCustomerList(1,  [], 0);\r\n        //------------------------------------------------- \r\n    }\r\n\r\n\r\n    // if (respReceiptSetting && respReceiptSetting.is_success\r\n    //     && respTaxSetting && respTaxSetting.is_success\r\n    //     && resProlductCount && resProlductCount.is_success) {\r\n    //To Clear indexDB----------------------------\r\n\r\n\r\n    //}\r\n\r\n\r\n    // const createIndexDB=(udid, ProductArray, RedirectUrl)=>{\r\n    //     (async () => {\r\n    //         if (!('indexedDB' in window)) {\r\n    //             console.warn('IndexedDB not supported')\r\n    //             return\r\n    //           }\r\n\r\n    //           const dbName = 'POSdb'\r\n    //           const storeName = 'product_'+udid\r\n    //           const version = 1 //versions start at 1\r\n\r\n    //           //delete Database\r\n    //           await deleteDB(dbName)\r\n\r\n\r\n    //           const db = await openDB(dbName, version, {\r\n    //             upgrade(db, oldVersion, newVersion, transaction) {\r\n    //               const store = db.createObjectStore(storeName,{ autoIncrement: true })   //  \"id\"         \r\n    //             }\r\n    //           })\r\n    //           const tx = db.transaction(storeName, 'readwrite')\r\n    //           const store = await tx.objectStore(storeName)\r\n\r\n    //           const val = 'hey!'\r\n    //           const key = 'Hello again'\r\n    //           ProductArray.forEach(element => {\r\n    //              const value =  store.put(element)\r\n    //           });\r\n\r\n    //           await tx.done\r\n\r\n    //         })()\r\n    // }\r\n\r\n\r\n    //  this.getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\r\n    return <div>\r\n        <h1>Product Loading...</h1>\r\n        <h2> {loadingProducts} ( {loadPerc})% </h2>;\r\n        ;\r\n    </div>\r\n}\r\n\r\nexport default ProductLoader"],"mappings":"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"},"metadata":{},"sourceType":"module"}