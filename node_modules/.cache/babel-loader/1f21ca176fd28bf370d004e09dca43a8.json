{"ast":null,"code":"import Config from '../Config'; // import { get_UDid } from '../ALL_localstorage'\n// import { servicesVersion } from 'typescript';\n\nexport const serverRequest = {\n  clientServiceRequest\n};\nconst API_URL = Config.key.OP_API_URL; //const API_URL ='https://dev1.app.olivertest.com/api/';\n\nfunction clientServiceRequest(requestType, requestUrl, postParameter) {\n  let version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  try {\n    //console.log(\"postParameter\",postParameter)\n    if (requestType == 'POST') {\n      var requestOptions = {\n        method: requestType,\n        headers: {\n          \"access-control-allow-origin\": \"*\",\n          \"access-control-allow-credentials\": \"true\",\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\"))\n        },\n        mode: 'cors',\n        body: JSON.stringify(postParameter)\n      };\n    }\n\n    if (requestType == 'GET') {\n      var requestOptions = {\n        method: requestType,\n        headers: {\n          \"access-control-allow-origin\": \"*\",\n          \"access-control-allow-credentials\": \"true\",\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\"))\n        },\n        mode: 'cors'\n      };\n    }\n\n    if (localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid')) {\n      requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid');\n    }\n\n    return fetch(`${API_URL}v${version}${requestUrl}`, requestOptions).then(handleResponse).then(servericeResponse => {\n      // console.log('--------common-service-Res--', servericeResponse);\n      return servericeResponse;\n    });\n  } catch (error) {\n    return error.message;\n  }\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {// auto logout if 401 response returned from api\n        // logout();\n        // location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}","map":{"version":3,"names":["Config","serverRequest","clientServiceRequest","API_URL","key","OP_API_URL","requestType","requestUrl","postParameter","version","requestOptions","method","headers","btoa","sessionStorage","getItem","mode","body","JSON","stringify","localStorage","fetch","then","handleResponse","servericeResponse","error","message","response","text","data","parse","ok","status","statusText","Promise","reject","logout","removeItem"],"sources":["D:/OliverPOS/OliverPOS3.0/src/CommonServiceRequest/serverRequest.js"],"sourcesContent":["import Config from '../Config'\r\n// import { get_UDid } from '../ALL_localstorage'\r\n// import { servicesVersion } from 'typescript';\r\n\r\nexport const serverRequest = {\r\n    clientServiceRequest\r\n};\r\n\r\nconst API_URL = Config.key.OP_API_URL\r\n\r\n//const API_URL ='https://dev1.app.olivertest.com/api/';\r\nfunction clientServiceRequest(requestType, requestUrl, postParameter,version=1) {\r\ntry {\r\n    \r\n    //console.log(\"postParameter\",postParameter)\r\n    if (requestType == 'POST') {\r\n        var requestOptions = {\r\n            method: requestType,\r\n            headers: {\r\n                \"access-control-allow-origin\": \"*\",\r\n                \"access-control-allow-credentials\": \"true\",\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\")),\r\n            }\r\n            , mode: 'cors',\r\n            body: JSON.stringify(postParameter)\r\n        };\r\n    }\r\n    if (requestType == 'GET') {\r\n        var requestOptions = {\r\n            method: requestType,\r\n            headers: {\r\n                \"access-control-allow-origin\": \"*\",\r\n                \"access-control-allow-credentials\": \"true\",\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\")),\r\n            }\r\n            , mode: 'cors',\r\n        };\r\n    }\r\n    if (localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid')) {\r\n        requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid')\r\n    }\r\n    \r\n    return  fetch(`${API_URL}v${version}${requestUrl}`, requestOptions).then(handleResponse)\r\n        .then(servericeResponse => {\r\n           // console.log('--------common-service-Res--', servericeResponse);\r\n            return servericeResponse;\r\n        })\r\n\r\n    } catch (error) {\r\n    return error.message;\r\n    }\r\n}\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                // logout();\r\n               // location.reload(true);\r\n            }\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB,C,CACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAG;EACzBC;AADyB,CAAtB;AAIP,MAAMC,OAAO,GAAGH,MAAM,CAACI,GAAP,CAAWC,UAA3B,C,CAEA;;AACA,SAASH,oBAAT,CAA8BI,WAA9B,EAA2CC,UAA3C,EAAuDC,aAAvD,EAAgF;EAAA,IAAXC,OAAW,uEAAH,CAAG;;EAChF,IAAI;IAEA;IACA,IAAIH,WAAW,IAAI,MAAnB,EAA2B;MACvB,IAAII,cAAc,GAAG;QACjBC,MAAM,EAAEL,WADS;QAEjBM,OAAO,EAAE;UACL,+BAA+B,GAD1B;UAEL,oCAAoC,MAF/B;UAGL,UAAU,kBAHL;UAIL,gBAAgB,kBAJX;UAKL,iBAAiB,WAAWC,IAAI,CAACC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAD;QAL3B,CAFQ;QASfC,IAAI,EAAE,MATS;QAUjBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,aAAf;MAVW,CAArB;IAYH;;IACD,IAAIF,WAAW,IAAI,KAAnB,EAA0B;MACtB,IAAII,cAAc,GAAG;QACjBC,MAAM,EAAEL,WADS;QAEjBM,OAAO,EAAE;UACL,+BAA+B,GAD1B;UAEL,oCAAoC,MAF/B;UAGL,UAAU,kBAHL;UAIL,gBAAgB,kBAJX;UAKL,iBAAiB,WAAWC,IAAI,CAACC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAD;QAL3B,CAFQ;QASfC,IAAI,EAAE;MATS,CAArB;IAWH;;IACD,IAAII,YAAY,CAACL,OAAb,CAAqB,UAArB,KAAoC,MAApC,IAA8CK,YAAY,CAACL,OAAb,CAAqB,UAArB,CAAlD,EAAoF;MAChFL,cAAc,CAACE,OAAf,CAAuB,UAAvB,IAAqCQ,YAAY,CAACL,OAAb,CAAqB,UAArB,KAAoCK,YAAY,CAACL,OAAb,CAAqB,UAArB,CAAzE;IACH;;IAED,OAAQM,KAAK,CAAE,GAAElB,OAAQ,IAAGM,OAAQ,GAAEF,UAAW,EAApC,EAAuCG,cAAvC,CAAL,CAA4DY,IAA5D,CAAiEC,cAAjE,EACHD,IADG,CACEE,iBAAiB,IAAI;MACxB;MACC,OAAOA,iBAAP;IACH,CAJG,CAAR;EAMC,CAxCL,CAwCM,OAAOC,KAAP,EAAc;IAChB,OAAOA,KAAK,CAACC,OAAb;EACC;AACJ;;AACD,SAASH,cAAT,CAAwBI,QAAxB,EAAkC;EAC9B,OAAOA,QAAQ,CAACC,IAAT,GAAgBN,IAAhB,CAAqBM,IAAI,IAAI;IAChC,MAAMC,IAAI,GAAGD,IAAI,IAAIV,IAAI,CAACY,KAAL,CAAWF,IAAX,CAArB;;IACA,IAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;MACd,IAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B,CACzB;QACA;QACD;MACF;;MACD,MAAMP,KAAK,GAAII,IAAI,IAAIA,IAAI,CAACH,OAAd,IAA0BC,QAAQ,CAACM,UAAjD;MACA,OAAOC,OAAO,CAACC,MAAR,CAAeV,KAAf,CAAP;IACH;;IACD,OAAOI,IAAP;EACH,CAZM,CAAP;AAaH;;AAED,SAASO,MAAT,GAAkB;EACd;EACAhB,YAAY,CAACiB,UAAb,CAAwB,MAAxB;AACH"},"metadata":{},"sourceType":"module"}