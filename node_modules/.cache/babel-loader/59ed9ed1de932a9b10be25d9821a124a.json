{"ast":null,"code":"import { IDBPDatabase, openDB } from 'idb';\nexport const indexDatabase = (storeName, itemArray) => {\n  const dbName = \"POSDB\";\n  const request = indexedDB.open(dbName, 1);\n\n  request.onerror = event => {\n    // Handle errors.\n    console.log(\"IndexDB Not created\");\n  };\n\n  request.onupgradeneeded = event => {\n    const db = event.target.result; // Create an objectStore to hold information about our customers. We're\n    // going to use \"ssn\" as our key path because it's guaranteed to be\n    // unique - or at least that's what I was told during the kickoff meeting.\n\n    const objectStore = db.createObjectStore(storeName, {\n      keyPath: \"ssn\"\n    }); // Create an index to search customers by name. We may have duplicates\n    // so we can't use a unique index.\n\n    objectStore.createIndex(\"products\", \"WPID\", {\n      unique: false\n    }); // // Create an index to search customers by email. We want to ensure that\n    // // no two customers have the same email, so use a unique index.\n    // objectStore.createIndex(\"email\", \"email\", { unique: true });\n    // Use transaction oncomplete to make sure the objectStore creation is\n    // finished before adding data into it.\n\n    objectStore.transaction.oncomplete = event => {\n      // Store values in the newly created objectStore.\n      const customerObjectStore = db.transaction(storeName, \"readwrite\").objectStore(storeName);\n      itemArray.forEach(item => {\n        customerObjectStore.add(item);\n      });\n    };\n  };\n}; //export default indexDatabase","map":{"version":3,"names":["IDBPDatabase","openDB","indexDatabase","storeName","itemArray","dbName","request","indexedDB","open","onerror","event","console","log","onupgradeneeded","db","target","result","objectStore","createObjectStore","keyPath","createIndex","unique","transaction","oncomplete","customerObjectStore","forEach","item","add"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/indexDb.js"],"sourcesContent":["\r\nimport { IDBPDatabase, openDB } from 'idb';\r\n\r\nexport const indexDatabase = (storeName, itemArray) => {\r\n    const dbName = \"POSDB\";\r\n\r\n    const request = indexedDB.open(dbName, 1);\r\n\r\n    request.onerror = (event) => {\r\n        // Handle errors.\r\n        console.log(\"IndexDB Not created\")\r\n    };\r\n    request.onupgradeneeded = (event) => {\r\n        const db = event.target.result;\r\n\r\n        // Create an objectStore to hold information about our customers. We're\r\n        // going to use \"ssn\" as our key path because it's guaranteed to be\r\n        // unique - or at least that's what I was told during the kickoff meeting.\r\n        const objectStore = db.createObjectStore(storeName, { keyPath: \"ssn\" });\r\n\r\n        // Create an index to search customers by name. We may have duplicates\r\n        // so we can't use a unique index.\r\n        objectStore.createIndex(\"products\", \"WPID\", { unique: false });\r\n\r\n        // // Create an index to search customers by email. We want to ensure that\r\n        // // no two customers have the same email, so use a unique index.\r\n        // objectStore.createIndex(\"email\", \"email\", { unique: true });\r\n\r\n        // Use transaction oncomplete to make sure the objectStore creation is\r\n        // finished before adding data into it.\r\n        objectStore.transaction.oncomplete = (event) => {\r\n            // Store values in the newly created objectStore.\r\n            const customerObjectStore = db.transaction(storeName, \"readwrite\").objectStore(storeName);\r\n            itemArray.forEach((item) => {\r\n                customerObjectStore.add(item);\r\n            });\r\n        };\r\n    };\r\n}\r\n//export default indexDatabase"],"mappings":"AACA,SAASA,YAAT,EAAuBC,MAAvB,QAAqC,KAArC;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;EACnD,MAAMC,MAAM,GAAG,OAAf;EAEA,MAAMC,OAAO,GAAGC,SAAS,CAACC,IAAV,CAAeH,MAAf,EAAuB,CAAvB,CAAhB;;EAEAC,OAAO,CAACG,OAAR,GAAmBC,KAAD,IAAW;IACzB;IACAC,OAAO,CAACC,GAAR,CAAY,qBAAZ;EACH,CAHD;;EAIAN,OAAO,CAACO,eAAR,GAA2BH,KAAD,IAAW;IACjC,MAAMI,EAAE,GAAGJ,KAAK,CAACK,MAAN,CAAaC,MAAxB,CADiC,CAGjC;IACA;IACA;;IACA,MAAMC,WAAW,GAAGH,EAAE,CAACI,iBAAH,CAAqBf,SAArB,EAAgC;MAAEgB,OAAO,EAAE;IAAX,CAAhC,CAApB,CANiC,CAQjC;IACA;;IACAF,WAAW,CAACG,WAAZ,CAAwB,UAAxB,EAAoC,MAApC,EAA4C;MAAEC,MAAM,EAAE;IAAV,CAA5C,EAViC,CAYjC;IACA;IACA;IAEA;IACA;;IACAJ,WAAW,CAACK,WAAZ,CAAwBC,UAAxB,GAAsCb,KAAD,IAAW;MAC5C;MACA,MAAMc,mBAAmB,GAAGV,EAAE,CAACQ,WAAH,CAAenB,SAAf,EAA0B,WAA1B,EAAuCc,WAAvC,CAAmDd,SAAnD,CAA5B;MACAC,SAAS,CAACqB,OAAV,CAAmBC,IAAD,IAAU;QACxBF,mBAAmB,CAACG,GAApB,CAAwBD,IAAxB;MACH,CAFD;IAGH,CAND;EAOH,CAzBD;AA0BH,CAnCM,C,CAoCP"},"metadata":{},"sourceType":"module"}