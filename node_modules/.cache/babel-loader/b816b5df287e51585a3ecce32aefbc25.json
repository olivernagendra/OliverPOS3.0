{"ast":null,"code":"// A mock function to mimic making an async request for data\nimport { serverRequest } from '../../CommonServiceRequest/serverRequest';\nexport function loginAPI(parameter) {\n  // const res = await fetch('https://fakestoreapi.com/products');\n  //   const data = await res.json();\n  //   return data;\n  return serverRequest.clientServiceRequest('POST', `/account/Login`, parameter).then(userRes => {\n    //var data = userRes.content;\n    return userRes;\n  }).catch(error => {\n    return error;\n  });\n} // External Login API \n\nexport function OliverExternalLogin(externalLoginParam) {\n  return serverRequest.clientServiceRequest('POST', '/account/LoginExternaly', externalLoginParam).then(response => {\n    console.log('OliverExternalLogin services respons--', response);\n\n    if (response) {\n      return response;\n    }\n  }).catch(function (error) {\n    console.log(error);\n    return 'Unable to fetch';\n  });\n}\n_c = OliverExternalLogin;\nexport function GetUserProfile(profileGetParam) {\n  var requestOptions = {\n    method: 'GET',\n    // headers: {\n    //     \"access-control-allow-origin\": \"*\",\n    //     \"access-control-allow-credentials\": \"true\",\n    //     'Accept': 'application/json',\n    //     'Content-Type': 'application/json',\n    // }\n    mode: 'cors'\n  };\n  return fetch(`https://people.googleapis.com/v1/people/${profileGetParam.userId}/?personFields=ageRanges,names,photos,addresses,locations,birthdays,genders,phoneNumbers,metadata&alt=json&access_token=${profileGetParam.access_token}`) // .then(response => {\n  //     console.log('---res----', response);\n  //     return response\n  // })\n  // .then(handleResponse)\n  .then(profileInfo => {\n    console.log('--------service -Res--', profileInfo);\n    return profileInfo;\n  }).catch(function (error) {\n    console.log(error);\n    return 'Unable to get';\n  });\n}\n_c2 = GetUserProfile;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"OliverExternalLogin\");\n$RefreshReg$(_c2, \"GetUserProfile\");","map":{"version":3,"names":["serverRequest","loginAPI","parameter","clientServiceRequest","then","userRes","catch","error","OliverExternalLogin","externalLoginParam","response","console","log","GetUserProfile","profileGetParam","requestOptions","method","mode","fetch","userId","access_token","profileInfo"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/login/loginAPI.js"],"sourcesContent":["// A mock function to mimic making an async request for data\r\nimport { serverRequest } from '../../CommonServiceRequest/serverRequest'\r\nexport function loginAPI(parameter) {\r\n    // const res = await fetch('https://fakestoreapi.com/products');\r\n    //   const data = await res.json();\r\n    //   return data;\r\n\r\n    return serverRequest.clientServiceRequest('POST', `/account/Login`, parameter)\r\n        .then(userRes => {\r\n            //var data = userRes.content;\r\n            return userRes;\r\n        }).catch(error => {\r\n            return error\r\n        });\r\n}\r\n\r\n\r\n// External Login API \r\n\r\nexport function OliverExternalLogin(externalLoginParam) {\r\n    return serverRequest.clientServiceRequest('POST', '/account/LoginExternaly', externalLoginParam)\r\n        .then(response => {\r\n            console.log('OliverExternalLogin services respons--', response);\r\n            if (response) {\r\n                return response;\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(error);\r\n            return 'Unable to fetch';\r\n        })\r\n}\r\n\r\n\r\nexport function GetUserProfile(profileGetParam) {\r\n    var requestOptions = {\r\n        method: 'GET',\r\n        // headers: {\r\n        //     \"access-control-allow-origin\": \"*\",\r\n        //     \"access-control-allow-credentials\": \"true\",\r\n        //     'Accept': 'application/json',\r\n        //     'Content-Type': 'application/json',\r\n        // }\r\n        mode: 'cors',\r\n    };\r\n    return fetch(`https://people.googleapis.com/v1/people/${profileGetParam.userId}/?personFields=ageRanges,names,photos,addresses,locations,birthdays,genders,phoneNumbers,metadata&alt=json&access_token=${profileGetParam.access_token}`)\r\n        // .then(response => {\r\n        //     console.log('---res----', response);\r\n        //     return response\r\n        // })\r\n        // .then(handleResponse)\r\n        .then(profileInfo => {\r\n            console.log('--------service -Res--', profileInfo);\r\n            return profileInfo;\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n            return 'Unable to get';\r\n        })\r\n}"],"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,0CAA9B;AACA,OAAO,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;EAChC;EACA;EACA;EAEA,OAAOF,aAAa,CAACG,oBAAd,CAAmC,MAAnC,EAA4C,gBAA5C,EAA6DD,SAA7D,EACFE,IADE,CACGC,OAAO,IAAI;IACb;IACA,OAAOA,OAAP;EACH,CAJE,EAIAC,KAJA,CAIMC,KAAK,IAAI;IACd,OAAOA,KAAP;EACH,CANE,CAAP;AAOH,C,CAGD;;AAEA,OAAO,SAASC,mBAAT,CAA6BC,kBAA7B,EAAiD;EACpD,OAAOT,aAAa,CAACG,oBAAd,CAAmC,MAAnC,EAA2C,yBAA3C,EAAsEM,kBAAtE,EACFL,IADE,CACGM,QAAQ,IAAI;IACdC,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDF,QAAtD;;IACA,IAAIA,QAAJ,EAAc;MACV,OAAOA,QAAP;IACH;EACJ,CANE,EAMAJ,KANA,CAMM,UAAUC,KAAV,EAAiB;IACtBI,OAAO,CAACC,GAAR,CAAYL,KAAZ;IACA,OAAO,iBAAP;EACH,CATE,CAAP;AAUH;KAXeC,mB;AAchB,OAAO,SAASK,cAAT,CAAwBC,eAAxB,EAAyC;EAC5C,IAAIC,cAAc,GAAG;IACjBC,MAAM,EAAE,KADS;IAEjB;IACA;IACA;IACA;IACA;IACA;IACAC,IAAI,EAAE;EARW,CAArB;EAUA,OAAOC,KAAK,CAAE,2CAA0CJ,eAAe,CAACK,MAAO,2HAA0HL,eAAe,CAACM,YAAa,EAA1N,CAAL,CACH;EACA;EACA;EACA;EACA;EALG,CAMFhB,IANE,CAMGiB,WAAW,IAAI;IACjBV,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCS,WAAtC;IACA,OAAOA,WAAP;EACH,CATE,EAUFf,KAVE,CAUI,UAAUC,KAAV,EAAiB;IACpBI,OAAO,CAACC,GAAR,CAAYL,KAAZ;IACA,OAAO,eAAP;EACH,CAbE,CAAP;AAcH;MAzBeM,c"},"metadata":{},"sourceType":"module"}