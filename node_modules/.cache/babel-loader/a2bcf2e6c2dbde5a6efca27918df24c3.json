{"ast":null,"code":"var _jsxFileName = \"D:\\\\OliverPOS\\\\OliverPOS3.0\\\\src\\\\components\\\\loadProduct\\\\ProductLoader.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteDB, openDB } from 'idb';\nimport { get_UDid } from '../common/localSettings';\nimport Config from '../../Config';\nimport { receiptSetting } from '../serverSetting/receiptSettingSlice';\nimport ActiveUser from '../../settings/ActiveUser';\nimport { taxSetting } from '../serverSetting/taxSettingSlice';\nimport STATUSES from '../../constants/apiStatus';\nimport { productCount } from './productCountSlice';\nimport { productLoader } from './loadProductSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { useIndexedDB } from 'react-indexed-db'; //import LoaderOnboarding from '../onboarding/components/LoaderOnboarding'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductLoader = () => {\n  _s();\n\n  const {\n    add,\n    update,\n    getByID\n  } = useIndexedDB(\"products\");\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [loadingProducts, setLoadingProducts] = useState(0);\n  const [loadPerc, setLoadPerc] = useState(0); //........Test--------------------------\n\n  const saveDataIntoIndexDB = ProductArray => {\n    ProductArray && ProductArray.length > 0 && ProductArray.map(item => {\n      add(item).then(key => {\n        console.log(\"ID Generated: \", key); //   let newState = Object.assign({}, state);\n        //   newState.id = key;\n        //   setState(newState);\n        //   history.goBack();\n      }, error => {\n        console.log(error);\n      });\n    }); // var _state = { \"WPID\": 101, \"name\": \"nagendra\", \"age\": 32 }\n  }; //........................\n  // const UpdateIndexDB = async (udid, ProductArray, RedirectUrl) => {\n  //     var TotaltotalRecord = localStorage.getItem('productcount');\n  //     console.log(\"ProductCount\", TotaltotalRecord)\n  //     var _perc = 0;\n  //     if (ProductArray && ProductArray.length > 0 && TotaltotalRecord && TotaltotalRecord > 0) {\n  //         _perc = ((ProductArray.length * 100) / TotaltotalRecord).toFixed(0);\n  //     }\n  //     // this.setState({ loadPerc: _perc });    \n  //     // const dbPromise = openDB(\"ProductDB\", 1, {\n  //     //     upgrade(db, oldVersion, newVersion, transaction) {\n  //     //         db.createObjectStore(udid);\n  //     //     },\n  //     //     blocked() {\n  //     //         // …\n  //     //     },\n  //     //     blocking() {\n  //     //         // …\n  //     //     },\n  //     //     terminated() {\n  //     //         // …\n  //     //     },\n  //     // });\n  //     console.log(\"test1\")\n  //     const dbPromise = openDB('POSDB', 1, {\n  //         upgrade(db) {\n  //             db.createObjectStore(udid);\n  //         },\n  //     });\n  //     const idbKeyval = {\n  //         async get(key) {\n  //             const db = await dbPromise;\n  //             return db.transaction(udid).objectStore(udid).get(key);\n  //         },\n  //         async set(key, val) {\n  //             const db = await dbPromise;\n  //             const tx = db.transaction(udid, 'readwrite');\n  //             tx.objectStore(udid).put(val, key);\n  //             return tx.complete;\n  //         },\n  //     };\n  //     // for unique array----------------------\n  //     const arrayUniqueByKey = [...new Map(ProductArray.map(item =>\n  //         [item['WPID'], item])).values()];\n  //     console.log(\"test2\")\n  //     idbKeyval.set('ProductList', arrayUniqueByKey);\n  //     console.log(\"test3\", arrayUniqueByKey)\n  //     // idbKeyval.get('ProductList').then(val => {\n  //     //     if (ProductArray.length == 0 || !val || val.length == 0 || val == null || val == \"\") {\n  //     //         console.log(\"wait...\");\n  //     //     } else {\n  //     //         if (ActiveUser.key.isSelfcheckout == true) {\n  //     //             // if(isMobileOnly == true){\n  //     //             //     navigate('/selfcheckout')\n  //     //             // }else{\n  //     //             //  navigate( '/selfcheckout');\n  //     //             //}\n  //     //         }\n  //     //         else {\n  //     //             // if(isMobileOnly == true){\n  //     //             //     navigate('/home')\n  //     //             // }else{\n  //     //             //     navigate( '/home');\n  //     //             // }\n  //     //         }\n  //     //     }\n  //     // })\n  //     //------------------------------------------\n  // }\n\n\n  const getProductList = (pn, pz, pl) => {\n    // var trc = localStorage.getItem(\"ReloadCount\") ? localStorage.getItem(\"ReloadCount\") : 0;\n    // if (trc != 0) {\n    //     var _perc = ((pl.length * 100) / trc).toFixed(0);\n    //     setLoadingProducts(\"Synched \" + pl.length + \" Products, Out of \" + trc + \"\");\n    //     setLoadPerc(_perc);\n    //     // this.setState({ loadingProducts: \"Synched \" + pl.length + \" Products, Out of \" + trc + \"\",loadPerc: _perc });          \n    // }\n    //if (!localStorage.getItem('user') || !sessionStorage.getItem(\"issuccess\")) {\n    //redirectToURL()\n    // navigate('/loginpin');\n    //}\n    var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/home';\n    var udid = get_UDid(localStorage.getItem(\"UDID\"));\n    var WarehouseId = localStorage.getItem(\"WarehouseId\") ? parseInt(localStorage.getItem(\"WarehouseId\")) : 0;\n    var pageNumber = pn;\n    var pageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n    var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n    var ProductArray = pl;\n    var TotaltotalRecord = trc;\n    const requestOptions = {\n      method: 'GET',\n      headers: {\n        \"access-control-allow-origin\": \"*\",\n        \"access-control-allow-credentials\": \"true\",\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\"))\n      },\n      mode: 'cors'\n    };\n    var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n\n    if (isDemoUser == true) {\n      requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid');\n    }\n\n    if (TotaltotalRecord == 0 && isDemoUser == false) {\n      // navigate( RedirectUrl) ;  \n      console.log(\"test4\"); // UpdateIndexDB(udid, ProductArray, RedirectUrl);\n    }\n\n    fetch(`${Config.key.OP_API_URL}/v1/Product/Records?pageNumber=${pageNumber}&pageSize=${PageSize}&WarehouseId=${WarehouseId}`, requestOptions).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(response.statusText); // throw an error if there's something wrong with the response\n    }).then(function handleData(data) {\n      var reloadCount = localStorage.getItem(\"ReloadCount\"); //ProductArray = [...new Set([...ProductArray, ...data.content.Records])];\n\n      saveDataIntoIndexDB(data.content.Records); //check dataExist into indexdb-------------------------\n\n      var isExist = false;\n      console.log(\"--------------Total Products count--------\" + TotaltotalRecord);\n      pageNumber++;\n      getProductList(pageNumber, PageSize, data.content.Records); // console.log(\"Test\", TotaltotalRecord, ProductArray.length)\n      // if (isDemoUser == false && (TotaltotalRecord > ProductArray.length) && ((TotaltotalRecord != ProductArray.length) || pageNumber <= (TotaltotalRecord / PageSize * 1.0))) {\n      //     console.log(\"--------------Product list request time--------\" + new Date());\n      //     // self.UpdateIndexDB(udid,ProductArray);\n      //     pageNumber++;\n      //     //console.log(\"ProductArray1\",ProductArray.length)     \n      //    // console.log(\"test5\")\n      //     getProductList(pageNumber, PageSize, ProductArray);\n      //     //console.log(\"test6\")\n      // }\n      // else {\n      //     console.log(\"--------------all records are done-----------\");\n      //     //console.log(\"ProductArray2\",ProductArray.length)                        \n      //     // UpdateIndexDB(udid, ProductArray, RedirectUrl);\n      //     //navigate('/home');\n      // }\n    }).catch(function handleError(error) {\n      console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\n      var reloadCount = localStorage.getItem(\"ReloadCount\"); // handle errors here\n\n      if (reloadCount < 3) {\n        localStorage.setItem(\"ReloadCount\", parseInt(reloadCount) + 1);\n        setTimeout(function () {\n          navigate('/'); //Reload to get product\n          // navigate( '/home')\n        }, 1000); // navigate('/home')\n      }\n    });\n  }; //Getting the receipt and tax setting--------------------        \n\n\n  const [respReceiptSetting, respTaxSetting, resProlductCount] = useSelector(state => [state.receiptsetting, state.taxsetting, state.productcount]);\n\n  if (respReceiptSetting && respReceiptSetting.status == STATUSES.IDLE && respReceiptSetting.is_success) {\n    localStorage.setItem('orderreciept', JSON.stringify(respReceiptSetting.data.content));\n  }\n\n  if (respTaxSetting && respTaxSetting.status == STATUSES.IDLE && respTaxSetting.is_success) {\n    localStorage.setItem('TAX_SETTING', JSON.stringify(respTaxSetting.data.content));\n  }\n\n  if (resProlductCount && resProlductCount.status == STATUSES.IDLE && resProlductCount.is_success) {\n    localStorage.setItem('productcount', JSON.stringify(resProlductCount.data.content.count));\n\n    if (resProlductCount.data.content.count > 0) {\n      getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, []);\n    }\n  }\n\n  let useCancelled = false;\n  useEffect(() => {\n    if (useCancelled == false) {\n      fetchData();\n    }\n\n    return () => {\n      useCancelled = true;\n    };\n  }, []);\n\n  const fetchData = async () => {\n    //calling multiple api\n    var udid = get_UDid(localStorage.getItem(\"UDID\"));\n    dispatch(productCount(udid));\n    dispatch(receiptSetting());\n    dispatch(taxSetting());\n  }; //  this.getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Product Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", loadingProducts, \" ( \", loadPerc, \")% \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }, this), \"; ;\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 12\n  }, this);\n};\n\n_s(ProductLoader, \"mXR+YEgd7EepAg2T/ZeXuF4qoo0=\", false, function () {\n  return [useIndexedDB, useNavigate, useDispatch, useSelector];\n});\n\n_c = ProductLoader;\nexport default ProductLoader;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductLoader\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","deleteDB","openDB","get_UDid","Config","receiptSetting","ActiveUser","taxSetting","STATUSES","productCount","productLoader","useNavigate","useIndexedDB","ProductLoader","add","update","getByID","navigate","dispatch","loadingProducts","setLoadingProducts","loadPerc","setLoadPerc","saveDataIntoIndexDB","ProductArray","length","map","item","then","key","console","log","error","getProductList","pn","pz","pl","RedirectUrl","isSelfcheckout","udid","localStorage","getItem","WarehouseId","parseInt","pageNumber","pageSize","FETCH_PRODUCTS_PAGESIZE","PageSize","TotaltotalRecord","trc","requestOptions","method","headers","btoa","sessionStorage","mode","isDemoUser","fetch","OP_API_URL","response","ok","json","Error","statusText","handleData","data","reloadCount","content","Records","isExist","catch","handleError","JSON","stringify","setItem","setTimeout","respReceiptSetting","respTaxSetting","resProlductCount","state","receiptsetting","taxsetting","productcount","status","IDLE","is_success","count","useCancelled","fetchData"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/loadProduct/ProductLoader.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteDB, openDB } from 'idb';\n\nimport { get_UDid } from '../common/localSettings'\nimport Config from '../../Config';\nimport { receiptSetting } from '../serverSetting/receiptSettingSlice';\nimport ActiveUser from '../../settings/ActiveUser';\nimport { taxSetting } from '../serverSetting/taxSettingSlice';\nimport STATUSES from '../../constants/apiStatus';\nimport { productCount } from './productCountSlice';\nimport { productLoader } from './loadProductSlice';\nimport { useNavigate } from 'react-router-dom';\nimport { useIndexedDB } from 'react-indexed-db';\n\n//import LoaderOnboarding from '../onboarding/components/LoaderOnboarding'\nconst ProductLoader = () => {\n    const { add, update, getByID } = useIndexedDB(\"products\");\n    const navigate = useNavigate();\n    const dispatch = useDispatch()\n    const [loadingProducts, setLoadingProducts] = useState(0)\n    const [loadPerc, setLoadPerc] = useState(0)\n\n    //........Test--------------------------\n    const saveDataIntoIndexDB = (ProductArray) => {\n        ProductArray && ProductArray.length > 0 && ProductArray.map((item) => {\n            add(item).then(\n                (key) => {\n                    console.log(\"ID Generated: \", key);\n                    //   let newState = Object.assign({}, state);\n                    //   newState.id = key;\n                    //   setState(newState);\n                    //   history.goBack();\n                },\n                (error) => {\n                    console.log(error);\n                }\n            )\n        })\n\n        // var _state = { \"WPID\": 101, \"name\": \"nagendra\", \"age\": 32 }\n\n    }\n    //........................\n    // const UpdateIndexDB = async (udid, ProductArray, RedirectUrl) => {\n    //     var TotaltotalRecord = localStorage.getItem('productcount');\n    //     console.log(\"ProductCount\", TotaltotalRecord)\n    //     var _perc = 0;\n    //     if (ProductArray && ProductArray.length > 0 && TotaltotalRecord && TotaltotalRecord > 0) {\n    //         _perc = ((ProductArray.length * 100) / TotaltotalRecord).toFixed(0);\n    //     }\n    //     // this.setState({ loadPerc: _perc });    \n    //     // const dbPromise = openDB(\"ProductDB\", 1, {\n    //     //     upgrade(db, oldVersion, newVersion, transaction) {\n    //     //         db.createObjectStore(udid);\n    //     //     },\n    //     //     blocked() {\n    //     //         // …\n    //     //     },\n    //     //     blocking() {\n    //     //         // …\n    //     //     },\n    //     //     terminated() {\n    //     //         // …\n    //     //     },\n    //     // });\n    //     console.log(\"test1\")\n    //     const dbPromise = openDB('POSDB', 1, {\n    //         upgrade(db) {\n    //             db.createObjectStore(udid);\n    //         },\n    //     });\n\n\n    //     const idbKeyval = {\n    //         async get(key) {\n    //             const db = await dbPromise;\n    //             return db.transaction(udid).objectStore(udid).get(key);\n    //         },\n    //         async set(key, val) {\n    //             const db = await dbPromise;\n    //             const tx = db.transaction(udid, 'readwrite');\n    //             tx.objectStore(udid).put(val, key);\n    //             return tx.complete;\n    //         },\n    //     };\n    //     // for unique array----------------------\n    //     const arrayUniqueByKey = [...new Map(ProductArray.map(item =>\n    //         [item['WPID'], item])).values()];\n    //     console.log(\"test2\")\n    //     idbKeyval.set('ProductList', arrayUniqueByKey);\n    //     console.log(\"test3\", arrayUniqueByKey)\n    //     // idbKeyval.get('ProductList').then(val => {\n    //     //     if (ProductArray.length == 0 || !val || val.length == 0 || val == null || val == \"\") {\n    //     //         console.log(\"wait...\");\n    //     //     } else {\n    //     //         if (ActiveUser.key.isSelfcheckout == true) {\n    //     //             // if(isMobileOnly == true){\n    //     //             //     navigate('/selfcheckout')\n    //     //             // }else{\n    //     //             //  navigate( '/selfcheckout');\n    //     //             //}\n\n    //     //         }\n    //     //         else {\n    //     //             // if(isMobileOnly == true){\n    //     //             //     navigate('/home')\n    //     //             // }else{\n    //     //             //     navigate( '/home');\n    //     //             // }\n    //     //         }\n    //     //     }\n    //     // })\n\n    //     //------------------------------------------\n\n\n    // }\n    const getProductList = (pn, pz, pl) => {\n        // var trc = localStorage.getItem(\"ReloadCount\") ? localStorage.getItem(\"ReloadCount\") : 0;\n        // if (trc != 0) {\n        //     var _perc = ((pl.length * 100) / trc).toFixed(0);\n        //     setLoadingProducts(\"Synched \" + pl.length + \" Products, Out of \" + trc + \"\");\n        //     setLoadPerc(_perc);\n        //     // this.setState({ loadingProducts: \"Synched \" + pl.length + \" Products, Out of \" + trc + \"\",loadPerc: _perc });          \n        // }\n\n        //if (!localStorage.getItem('user') || !sessionStorage.getItem(\"issuccess\")) {\n        //redirectToURL()\n        // navigate('/loginpin');\n        //}\n        var RedirectUrl = ActiveUser.key.isSelfcheckout && ActiveUser.key.isSelfcheckout == true ? '/selfcheckout' : '/home';\n\n        var udid = get_UDid(localStorage.getItem(\"UDID\"));\n\n        var WarehouseId = localStorage.getItem(\"WarehouseId\") ? parseInt(localStorage.getItem(\"WarehouseId\")) : 0;\n\n        var pageNumber = pn;\n        var pageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n        var PageSize = Config.key.FETCH_PRODUCTS_PAGESIZE;\n        var ProductArray = pl;\n        var TotaltotalRecord = trc;\n        const requestOptions = {\n            method: 'GET',\n            headers: {\n                \"access-control-allow-origin\": \"*\",\n                \"access-control-allow-credentials\": \"true\",\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Basic ' + btoa(sessionStorage.getItem(\"AUTH_KEY\")),\n            }\n            , mode: 'cors'\n        };\n        var isDemoUser = localStorage.getItem('demoUser') == 'true' && localStorage.getItem('DemoGuid');\n        if (isDemoUser == true) {\n            requestOptions.headers['demoauth'] = localStorage.getItem('DemoGuid') && localStorage.getItem('DemoGuid')\n        }\n        if (TotaltotalRecord == 0 && isDemoUser == false) {\n            // navigate( RedirectUrl) ;  \n            console.log(\"test4\")\n            // UpdateIndexDB(udid, ProductArray, RedirectUrl);\n        }\n\n        fetch(`${Config.key.OP_API_URL}/v1/Product/Records?pageNumber=${pageNumber}&pageSize=${PageSize}&WarehouseId=${WarehouseId}`, requestOptions)\n            .then(response => {\n                if (response.ok) { return response.json(); }\n                throw new Error(response.statusText)  // throw an error if there's something wrong with the response\n            })\n            .then(function handleData(data) {\n                var reloadCount = localStorage.getItem(\"ReloadCount\");\n                //ProductArray = [...new Set([...ProductArray, ...data.content.Records])];\n                saveDataIntoIndexDB(data.content.Records)\n                //check dataExist into indexdb-------------------------\n                var isExist = false;\n\n                console.log(\"--------------Total Products count--------\" + TotaltotalRecord);\n                pageNumber++;\n                getProductList(pageNumber, PageSize, data.content.Records);\n                // console.log(\"Test\", TotaltotalRecord, ProductArray.length)\n                // if (isDemoUser == false && (TotaltotalRecord > ProductArray.length) && ((TotaltotalRecord != ProductArray.length) || pageNumber <= (TotaltotalRecord / PageSize * 1.0))) {\n                //     console.log(\"--------------Product list request time--------\" + new Date());\n                //     // self.UpdateIndexDB(udid,ProductArray);\n                //     pageNumber++;\n                //     //console.log(\"ProductArray1\",ProductArray.length)     \n                //    // console.log(\"test5\")\n                //     getProductList(pageNumber, PageSize, ProductArray);\n                //     //console.log(\"test6\")\n                // }\n                // else {\n                //     console.log(\"--------------all records are done-----------\");\n                //     //console.log(\"ProductArray2\",ProductArray.length)                        \n\n                //     // UpdateIndexDB(udid, ProductArray, RedirectUrl);\n                //     //navigate('/home');\n\n                // }\n            })\n            .catch(function handleError(error) {\n                console.error('Console.save: No data ' + error + \" \" + JSON.stringify(error));\n                var reloadCount = localStorage.getItem(\"ReloadCount\");\n                // handle errors here\n                if (reloadCount < 3) {\n                    localStorage.setItem(\"ReloadCount\", (parseInt(reloadCount) + 1));\n                    setTimeout(function () {\n                        navigate('/'); //Reload to get product\n                        // navigate( '/home')\n                    }, 1000)\n                    // navigate('/home')\n                }\n            })\n    }\n\n\n    //Getting the receipt and tax setting--------------------        \n\n    const [respReceiptSetting, respTaxSetting, resProlductCount] = useSelector((state) => [state.receiptsetting, state.taxsetting, state.productcount])\n\n    if (respReceiptSetting && respReceiptSetting.status == STATUSES.IDLE && respReceiptSetting.is_success) {\n        localStorage.setItem('orderreciept', JSON.stringify(respReceiptSetting.data.content))\n    }\n    if (respTaxSetting && respTaxSetting.status == STATUSES.IDLE && respTaxSetting.is_success) {\n        localStorage.setItem('TAX_SETTING', JSON.stringify(respTaxSetting.data.content))\n    }\n    if (resProlductCount && resProlductCount.status == STATUSES.IDLE && resProlductCount.is_success) {\n        localStorage.setItem('productcount', JSON.stringify(resProlductCount.data.content.count))\n        if (resProlductCount.data.content.count > 0) {\n            getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, []);\n        }\n\n    }\n    let useCancelled = false;\n    useEffect(() => {\n        if (useCancelled == false) {\n            fetchData()\n        }\n        return () => {\n            useCancelled = true;\n        }\n    }, []);\n\n\n\n    const fetchData = async () => { //calling multiple api\n\n        var udid = get_UDid(localStorage.getItem(\"UDID\"));\n        dispatch(productCount(udid));\n        dispatch(receiptSetting());\n        dispatch(taxSetting());\n\n\n    }\n\n\n\n    //  this.getProductList(1, Config.key.FETCH_PRODUCTS_PAGESIZE, [], pcount);\n    return <div>\n        <h1>Product Loading...</h1>\n        <h2> {loadingProducts} ( {loadPerc})% </h2>;\n        ;\n    </div>\n}\n\nexport default ProductLoader"],"mappings":"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"},"metadata":{},"sourceType":"module"}