{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'; //import { useLoginMutation,useGetAllRegisterQuery } from '../../../components/pin/loginService';\n\nimport { pinAPI, createPinAPI } from './pinAPI';\nimport STATUSES from '../../constants/apiStatus';\nconst initialState = {\n  \"status\": STATUSES.IDLE,\n  \"data\": \"\",\n  \"error\": '',\n  \"is_success\": false\n};\nexport const validatePin = createAsyncThunk('pin/pinAPI', async (parameter, _ref) => {\n  let {\n    rejectWithValue\n  } = _ref;\n\n  try {\n    const response = await pinAPI(parameter); // The value we return becomes the `fulfilled` action payload\n\n    return response;\n  } catch (err) {\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\n    // by explicitly returning it using the `rejectWithValue()` utility\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const createPin = createAsyncThunk('pin/createPinAPI', async (parameter, _ref2) => {\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    const response = await createPinAPI(parameter); // The value we return becomes the `fulfilled` action payload\n\n    return response;\n  } catch (err) {\n    // Use `err.response.data` as `action.payload` for a `rejected` action,\n    // by explicitly returning it using the `rejectWithValue()` utility\n    return rejectWithValue(err.response.data);\n  }\n});\nexport const pinSlice = createSlice({\n  name: 'pin',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    loginPanding: state => {\n      state.status = STATUSES.LOADING;\n      state.data = \"\";\n    },\n    loginSuccess: (state, action) => {\n      state.status = STATUSES.IDLE;\n      state.error = '';\n      state.data = action.payload;\n    },\n    loginFail: (state, action) => {\n      state.status = STATUSES.ERROR;\n      state.data = \"\";\n      state.error = action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  // extraReducers: () => {}\n  extraReducers: builder => {\n    builder.addCase(validatePin.pending, state => {\n      state.status = STATUSES.LOADING;\n      state.data = \"\";\n      state.error = \"\";\n      state.is_success = false;\n    }).addCase(validatePin.fulfilled, (state, action) => {\n      state.status = action.payload && action.payload.is_success === true ? STATUSES.IDLE : STATUSES.ERROR;\n      state.data = action.payload && action.payload.is_success === true ? action.payload : \"\";\n      state.error = action.payload && action.payload.is_success === true ? \"\" : action.payload.message;\n      state.is_success = action.payload && action.payload.is_success === true ? true : false;\n    }).addCase(validatePin.rejected, (state, action) => {\n      state.status = STATUSES.IDLE;\n      state.data = \"\";\n      state.error = action.error;\n      state.is_success = false;\n    }) //Create Pin------------------------------\n    .addCase(createPin.pending, state => {\n      state.status = STATUSES.LOADING;\n      state.data = \"\";\n      state.error = \"\";\n      state.is_success = false;\n    }).addCase(createPin.fulfilled, (state, action) => {\n      state.status = action.payload && action.payload.is_success === true ? STATUSES.IDLE : STATUSES.ERROR;\n      state.data = action.payload && action.payload.is_success === true ? action.payload : \"\";\n      state.error = action.payload && action.payload.is_success === false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";\n      ;\n      state.is_success = action.payload && action.payload.is_success === true ? true : false;\n    }).addCase(createPin.rejected, (state, action) => {\n      state.status = STATUSES.IDLE;\n      state.data = \"\";\n      state.error = action.error;\n      state.is_success = false;\n    });\n  }\n});\nexport const {\n  loginPanding,\n  loginSuccess,\n  loginFail\n} = pinSlice.actions; // // The function below is called a selector and allows us to select a value from\n// // the state. Selectors can also be defined inline where they're used instead of\n// // in the slice file. For example: `useSelector((state: RootState) => state.pin.value)`\n// export const selectCount = (state) => state.pin.value;\n// // We can also write thunks by hand, which may contain both sync and async logic.\n// // Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\n//   const currentValue = selectCount(getState());\n//   if (currentValue % 2 === 1) {\n//     dispatch(incrementByAmount(amount));\n//   }\n// };\n\nexport default pinSlice;","map":{"version":3,"names":["createAsyncThunk","createSlice","pinAPI","createPinAPI","STATUSES","initialState","IDLE","validatePin","parameter","rejectWithValue","response","err","data","createPin","pinSlice","name","reducers","loginPanding","state","status","LOADING","loginSuccess","action","error","payload","loginFail","ERROR","extraReducers","builder","addCase","pending","is_success","fulfilled","message","rejected","exceptions","actions"],"sources":["D:/OliverPOS/OliverPOS3.0/src/components/pinPage/pinSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\n//import { useLoginMutation,useGetAllRegisterQuery } from '../../../components/pin/loginService';\r\nimport { pinAPI, createPinAPI } from './pinAPI';\r\nimport STATUSES from '../../constants/apiStatus';\r\n\r\n\r\nconst initialState = {\r\n  \"status\": STATUSES.IDLE,\r\n  \"data\": \"\",\r\n  \"error\": '',\r\n  \"is_success\": false\r\n};\r\n\r\n\r\nexport const validatePin = createAsyncThunk(\r\n  'pin/pinAPI',\r\n  async (parameter, { rejectWithValue }) => {\r\n    try {\r\n      const response = await pinAPI(parameter);\r\n      // The value we return becomes the `fulfilled` action payload\r\n      return response;\r\n    } catch (err) {\r\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n      // by explicitly returning it using the `rejectWithValue()` utility\r\n      return rejectWithValue(err.response.data)\r\n    }\r\n  }\r\n);\r\nexport const createPin = createAsyncThunk(\r\n  'pin/createPinAPI',\r\n  async (parameter, { rejectWithValue }) => {\r\n    try {\r\n      const response = await createPinAPI(parameter);\r\n      // The value we return becomes the `fulfilled` action payload\r\n      return response;\r\n    } catch (err) {\r\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\r\n      // by explicitly returning it using the `rejectWithValue()` utility\r\n      return rejectWithValue(err.response.data)\r\n    }\r\n  }\r\n);\r\nexport const pinSlice = createSlice({\r\n  name: 'pin',\r\n  initialState,\r\n  // The `reducers` field lets us define reducers and generate associated actions\r\n  reducers: {\r\n    loginPanding: (state) => {\r\n      state.status = STATUSES.LOADING;\r\n      state.data = \"\"\r\n    },\r\n    loginSuccess: (state, action) => {\r\n      state.status = STATUSES.IDLE;\r\n      state.error = '';\r\n      state.data = action.payload\r\n    },\r\n    loginFail: (state, action) => {\r\n      state.status = STATUSES.ERROR;\r\n      state.data = \"\";\r\n      state.error = action.payload;\r\n    }\r\n  },\r\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\r\n  // including actions generated by createAsyncThunk or in other slices.\r\n  // extraReducers: () => {}\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(validatePin.pending, (state) => {\r\n        state.status = STATUSES.LOADING;\r\n        state.data = \"\";\r\n        state.error = \"\";\r\n        state.is_success = false;\r\n      })\r\n      .addCase(validatePin.fulfilled, (state, action) => {\r\n        state.status = action.payload && action.payload.is_success === true ? STATUSES.IDLE : STATUSES.ERROR;\r\n        state.data = (action.payload && action.payload.is_success === true ? action.payload : \"\");\r\n        state.error = action.payload && action.payload.is_success === true ? \"\" : action.payload.message;\r\n        state.is_success = action.payload && action.payload.is_success === true ? true : false;\r\n      })\r\n      .addCase(validatePin.rejected, (state, action) => {\r\n        state.status = STATUSES.IDLE;\r\n        state.data = \"\";\r\n        state.error = action.error;\r\n        state.is_success = false;\r\n      })\r\n      //Create Pin------------------------------\r\n      .addCase(createPin.pending, (state) => {\r\n        state.status = STATUSES.LOADING;\r\n        state.data = \"\";\r\n        state.error = \"\";\r\n        state.is_success = false;\r\n      })\r\n      .addCase(createPin.fulfilled, (state, action) => {\r\n        state.status = action.payload && action.payload.is_success === true ? STATUSES.IDLE : STATUSES.ERROR;\r\n        state.data = (action.payload && action.payload.is_success === true ? action.payload : \"\");\r\n        state.error = action.payload && action.payload.is_success === false ? action.payload.exceptions[0] : action.payload ? \"Fail to fetch\" : \"\";;\r\n        state.is_success = action.payload && action.payload.is_success === true ? true : false;\r\n      })\r\n      .addCase(createPin.rejected, (state, action) => {\r\n        state.status = STATUSES.IDLE;\r\n        state.data = \"\";\r\n        state.error = action.error;\r\n        state.is_success = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { loginPanding, loginSuccess, loginFail } = pinSlice.actions;\r\n\r\n// // The function below is called a selector and allows us to select a value from\r\n// // the state. Selectors can also be defined inline where they're used instead of\r\n// // in the slice file. For example: `useSelector((state: RootState) => state.pin.value)`\r\n// export const selectCount = (state) => state.pin.value;\r\n\r\n// // We can also write thunks by hand, which may contain both sync and async logic.\r\n// // Here's an example of conditionally dispatching actions based on current state.\r\n// export const incrementIfOdd = (amount) => (dispatch, getState) => {\r\n//   const currentValue = selectCount(getState());\r\n//   if (currentValue % 2 === 1) {\r\n//     dispatch(incrementByAmount(amount));\r\n//   }\r\n// };\r\n\r\nexport default pinSlice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}